==================== FILE TREE ====================
RepoBundle/
  My Project/
    My Project\Application.Designer.vb
    My Project\Application.myapp
  ApplicationEvents.vb
  DatabaseReader.vb
  FileCombiner.vb
  frmMain.Designer.vb
  frmMain.resx
  frmMain.vb
  frmSettings.Designer.vb
  frmSettings.resx
  frmSettings.vb
  IniHelper.vb
  RepoBundle.sln
  RepoBundle.vbproj
  RepoBundle.vbproj.user
====================================================

Project Title: RepoBundle
Generated: 6/8/2025 4:32:11 PM

==================== FILE: My Project\Application.Designer.vb ====================
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Namespace My

    'NOTE: This file is auto-generated; do not modify it directly.  To make changes,
    ' or if you encounter build errors in this file, go to the Project Designer
    ' (go to Project Properties or double-click the My Project node in
    ' Solution Explorer), and make changes on the Application tab.
    '
    Partial Friend Class MyApplication

        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>
        Public Sub New()
            MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
            Me.IsSingleInstance = False
            Me.EnableVisualStyles = True
            Me.SaveMySettingsOnExit = True
            Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
        End Sub

        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>
        Protected Overrides Sub OnCreateMainForm()
            Me.MainForm = frmMain
        End Sub
    End Class
End Namespace


==================== FILE: ApplicationEvents.vb ====================
Imports Microsoft.VisualBasic.ApplicationServices

Namespace My
    ' The following events are available for MyApplication:
    ' Startup: Raised when the application starts, before the startup form is created.
    ' Shutdown: Raised after all application forms are closed.  This event is not raised if the application terminates abnormally.
    ' UnhandledException: Raised if the application encounters an unhandled exception.
    ' StartupNextInstance: Raised when launching a single-instance application and the application is already active. 
    ' NetworkAvailabilityChanged: Raised when the network connection is connected or disconnected.

    ' **NEW** ApplyApplicationDefaults: Raised when the application queries default values to be set for the application.

    ' Example:
    ' Private Sub MyApplication_ApplyApplicationDefaults(sender As Object, e As ApplyApplicationDefaultsEventArgs) Handles Me.ApplyApplicationDefaults
    '
    '   ' Setting the application-wide default Font:
    '   e.Font = New Font(FontFamily.GenericSansSerif, 12, FontStyle.Regular)
    '
    '   ' Setting the HighDpiMode for the Application:
    '   e.HighDpiMode = HighDpiMode.PerMonitorV2
    '
    '   ' If a splash dialog is used, this sets the minimum display time:
    '   e.MinimumSplashScreenDisplayTime = 4000
    ' End Sub

    Partial Friend Class MyApplication

    End Class
End Namespace


==================== FILE: DatabaseReader.vb ====================
Imports System.IO
Imports System.Text

Public Class DatabaseReader
    Public Shared Function GetDatabaseStructure(databasePath As String, databaseName As String) As String
        Try
            Dim result As String = ""
            result += "==================== DATABASE STRUCTURE ====================" + vbCrLf
            result += "Database Name: " + databaseName + vbCrLf
            result += "Database File: " + Path.GetFileName(databasePath) + vbCrLf
            result += "File Size: " + GetFileSize(databasePath) + vbCrLf
            result += "Last Modified: " + File.GetLastWriteTime(databasePath).ToString() + vbCrLf
            result += "============================================================" + vbCrLf
            result += vbCrLf

            If Path.GetExtension(databasePath).ToLower() = ".sql" Then
                result += "SQL Schema File Content:" + vbCrLf
                result += "------------------------" + vbCrLf
                result += File.ReadAllText(databasePath) + vbCrLf
            Else
                result += "Unsupported file type. Only .sql files are supported." + vbCrLf
            End If

            result += vbCrLf
            result += "==================== END DATABASE ====================" + vbCrLf

            Return result
        Catch ex As Exception
            Return "Error reading database structure: " + ex.Message
        End Try
    End Function

    Private Shared Function GetFileSize(filePath As String) As String
        Try
            Dim info As New FileInfo(filePath)
            Dim size As Long = info.Length

            If size < 1024 Then
                Return size.ToString() + " bytes"
            ElseIf size < 1024 * 1024 Then
                Return Math.Round(size / 1024.0, 1).ToString() + " KB"
            Else
                Return Math.Round(size / (1024.0 * 1024.0), 1).ToString() + " MB"
            End If
        Catch
            Return "Unknown"
        End Try
    End Function
End Class

==================== FILE: FileCombiner.vb ====================
Imports System.IO
Imports System.Text

Public Class FileCombiner
    Private projectFolder As String
    Private outputFolder As String
    Private fileDelimiter As String = "==================== FILE: {0} ===================="

    ' File extension lists for different project types
    Private vbDesktopExtensions As String() = {".vb", ".designer.vb", ".vbproj", ".sql"}
    Private aspCoreExtensions As String() = {".cs", ".cshtml", ".css", ".js", ".sql"}
    Private mediaExtensions As String() = {".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tif", ".tiff", ".webp", ".avif", ".apng",
                                          ".heif", ".heic", ".svg", ".pdf", ".eps", ".ai", ".cdr", ".wmf", ".emf", ".raw",
                                          ".cr2", ".nef", ".orf", ".rw2", ".dng", ".wav", ".aiff", ".au", ".flac", ".alac",
                                          ".ape", ".wv", ".mp3", ".aac", ".m4a", ".ogg", ".opus", ".wma", ".amr", ".mp4",
                                          ".m4v", ".mov", ".avi", ".wmv", ".flv", ".webm", ".mkv", ".mpg", ".mpeg", ".mp2",
                                          ".mpe", ".mpv", ".3gp", ".3g2", ".ts", ".mts", ".m2ts", ".ogv", ".rm", ".rmvb", ".asf"}

    Public Sub New(projectFolderPath As String, outputFolderPath As String)
        projectFolder = projectFolderPath
        outputFolder = outputFolderPath
    End Sub

    Public Function CombineFiles(checkedFiles As List(Of String), projectType As String, treeNodes As TreeNodeCollection, Optional projectTitle As String = "", Optional databasePath As String = "", Optional databaseName As String = "", Optional includeDatabase As Boolean = False, Optional sqlFiles As List(Of String) = Nothing) As CombineResult
        Try
            ' Validate inputs
            If checkedFiles Is Nothing OrElse checkedFiles.Count = 0 Then
                Return New CombineResult(False, "No files selected for combining")
            End If

            If String.IsNullOrWhiteSpace(outputFolder) Then
                Return New CombineResult(False, "Output folder not specified")
            End If

            If String.IsNullOrWhiteSpace(projectType) Then
                Return New CombineResult(False, "Project type not specified")
            End If

            ' Ensure output folder exists
            If Not Directory.Exists(outputFolder) Then
                Try
                    Directory.CreateDirectory(outputFolder)
                Catch ex As Exception
                    Return New CombineResult(False, "Cannot create output folder: " & ex.Message)
                End Try
            End If

            Dim combinedContent As New StringBuilder()
            Dim fileTreeContent As New StringBuilder()
            Dim fileCounter As Integer = 1
            Dim currentFileSize As Integer = 0
            Dim processedFiles As Integer = 0
            Dim includedFiles As Integer = 0
            Const maxFileSize As Integer = 200 * 1024 ' 200KB

            ' Generate file tree (only for first file)
            fileTreeContent.AppendLine("==================== FILE TREE ====================")
            GenerateFileTree(treeNodes, "", fileTreeContent)
            fileTreeContent.AppendLine("====================================================")
            fileTreeContent.AppendLine()

            ' Use project title if provided, otherwise use project type
            If Not String.IsNullOrWhiteSpace(projectTitle) Then
                fileTreeContent.AppendLine("Project Title: " & projectTitle)
            Else
                fileTreeContent.AppendLine("Project Type: " & projectType)
            End If

            fileTreeContent.AppendLine("Generated: " & DateTime.Now.ToString())
            fileTreeContent.AppendLine()

            ' Add database structure if requested and available
            If includeDatabase Then
                ' Handle single database file (backward compatibility)
                If Not String.IsNullOrWhiteSpace(databasePath) AndAlso Not String.IsNullOrWhiteSpace(databaseName) Then
                    If File.Exists(databasePath) Then
                        Try
                            Dim dbStructure As String = DatabaseReader.GetDatabaseStructure(databasePath, databaseName)
                            fileTreeContent.AppendLine(dbStructure)
                            fileTreeContent.AppendLine()
                        Catch ex As Exception
                            fileTreeContent.AppendLine("==================== DATABASE ERROR ====================")
                            fileTreeContent.AppendLine("Error reading database: " & ex.Message)
                            fileTreeContent.AppendLine("======================================================")
                            fileTreeContent.AppendLine()
                        End Try
                    Else
                        fileTreeContent.AppendLine("==================== DATABASE ERROR ====================")
                        fileTreeContent.AppendLine("Database file not found: " & databasePath)
                        fileTreeContent.AppendLine("======================================================")
                        fileTreeContent.AppendLine()
                    End If
                End If

                ' Handle multiple SQL schema files
                If sqlFiles IsNot Nothing AndAlso sqlFiles.Count > 0 Then
                    For Each sqlFile In sqlFiles
                        If File.Exists(sqlFile) AndAlso Path.GetExtension(sqlFile).ToLower() = ".sql" Then
                            Try
                                Dim dbName As String = Path.GetFileNameWithoutExtension(sqlFile)
                                Dim dbStructure As String = DatabaseReader.GetDatabaseStructure(sqlFile, dbName)
                                fileTreeContent.AppendLine(dbStructure)
                                fileTreeContent.AppendLine()
                            Catch ex As Exception
                                fileTreeContent.AppendLine("==================== SQL SCHEMA ERROR ====================")
                                fileTreeContent.AppendLine("Error reading SQL schema file '" & sqlFile & "': " & ex.Message)
                                fileTreeContent.AppendLine("=========================================================")
                                fileTreeContent.AppendLine()
                            End Try
                        End If
                    Next
                End If
            End If

            ' Add file tree only to the first file
            combinedContent.Append(fileTreeContent.ToString())
            currentFileSize += fileTreeContent.Length

            ' Process each checked file
            For Each filePath In checkedFiles
                processedFiles += 1
                If ShouldIncludeFile(filePath, projectType) Then
                    Dim fileContent As String = GetFileContent(filePath, projectType)
                    If Not String.IsNullOrEmpty(fileContent) Then
                        Dim delimiter As String = String.Format(fileDelimiter, GetRelativePath(filePath, projectFolder))
                        Dim section As String = delimiter & vbCrLf & fileContent & vbCrLf & vbCrLf

                        ' Check if adding this file would exceed the size limit
                        If currentFileSize + section.Length > maxFileSize AndAlso combinedContent.Length > fileTreeContent.Length Then
                            ' Save current file and start a new one
                            SaveCombinedFile(combinedContent.ToString(), fileCounter)
                            fileCounter += 1
                            combinedContent.Clear()
                            ' Don't add file tree to subsequent files - start clean
                            currentFileSize = 0
                        End If

                        combinedContent.Append(section)
                        currentFileSize += section.Length
                        includedFiles += 1
                    End If
                End If
            Next

            ' Always save at least one file, even if no content was added
            If combinedContent.Length > 0 Then
                ' Save the final file with content
                SaveCombinedFile(combinedContent.ToString(), fileCounter)
            Else
                ' No files were included - save a file with just the tree and explanation
                combinedContent.Append(fileTreeContent.ToString())
                combinedContent.AppendLine("No files matched the '" & projectType & "' project type criteria.")
                combinedContent.AppendLine()
                combinedContent.AppendLine("Possible reasons:")
                combinedContent.AppendLine("- Selected files don't match the project type extensions")
                combinedContent.AppendLine("- Files are empty or unreadable")
                combinedContent.AppendLine("- Project type filter excludes these file types")
                combinedContent.AppendLine()
                combinedContent.AppendLine("Total files processed: " & processedFiles.ToString())
                combinedContent.AppendLine("Files included: " & includedFiles.ToString())

                SaveCombinedFile(combinedContent.ToString(), fileCounter)
            End If

            Dim message As String = "Combined " & includedFiles.ToString() & " of " & processedFiles.ToString() & " files into " & fileCounter.ToString() & " output file(s) in " & outputFolder
            Return New CombineResult(True, message, fileCounter, includedFiles)

        Catch ex As Exception
            Return New CombineResult(False, "Error combining files: " & ex.Message)
        End Try
    End Function

    Private Sub GenerateFileTree(nodes As TreeNodeCollection, indent As String, treeContent As StringBuilder)
        For Each node As TreeNode In nodes
            If node.Checked AndAlso node.Tag IsNot Nothing Then
                Dim path As String = node.Tag.ToString()
                Dim relativePath As String = GetRelativePath(path, projectFolder)

                ' Only include checked items
                If Directory.Exists(path) Then
                    ' This is a folder - only show if it has checked children
                    If HasCheckedChildren(node) Then
                        treeContent.AppendLine(indent & relativePath & "/")
                        GenerateFileTree(node.Nodes, indent & "  ", treeContent)
                    End If
                ElseIf File.Exists(path) Then
                    ' This is a file - show it since it's checked
                    treeContent.AppendLine(indent & relativePath)
                End If
            ElseIf node.Tag IsNot Nothing AndAlso Directory.Exists(node.Tag.ToString()) Then
                ' This folder is not checked, but check if it has checked children
                If HasCheckedChildren(node) Then
                    Dim path As String = node.Tag.ToString()
                    Dim relativePath As String = GetRelativePath(path, projectFolder)
                    treeContent.AppendLine(indent & relativePath & "/")
                    GenerateFileTree(node.Nodes, indent & "  ", treeContent)
                End If
            End If
        Next
    End Sub

    Private Function HasCheckedChildren(parentNode As TreeNode) As Boolean
        For Each childNode As TreeNode In parentNode.Nodes
            If childNode.Checked Then
                Return True
            End If
            If HasCheckedChildren(childNode) Then
                Return True
            End If
        Next
        Return False
    End Function

    ' In your FileCombiner.vb, replace the GetRelativePath method with this fixed version:

    Private Function GetRelativePath(fullPath As String, basePath As String) As String
        Try
            ' Use simple string manipulation instead of URI to avoid URL encoding
            Dim normalizedBase As String = Path.GetFullPath(basePath).TrimEnd(Path.DirectorySeparatorChar) & Path.DirectorySeparatorChar
            Dim normalizedFull As String = Path.GetFullPath(fullPath)

            ' Check if the file is under the base path
            If normalizedFull.StartsWith(normalizedBase, StringComparison.OrdinalIgnoreCase) Then
                ' Remove the base path to get relative path
                Dim relativePath As String = normalizedFull.Substring(normalizedBase.Length)
                Return relativePath
            Else
                ' If not under base path, return just the filename
                Return Path.GetFileName(fullPath)
            End If

        Catch ex As Exception
            ' Fallback to filename only
            Return Path.GetFileName(fullPath)
        End Try
    End Function



    Private Sub SaveCombinedFile(content As String, fileNumber As Integer)
        Try
            Dim fileName As String = $"data{fileNumber:D3}.txt"
            Dim filePath As String = Path.Combine(outputFolder, fileName)

            ' Ensure the output directory exists
            Dim directoryPath As String = Path.GetDirectoryName(filePath)
            If Not Directory.Exists(directoryPath) Then
                Directory.CreateDirectory(directoryPath)
            End If

            ' Always create/overwrite the file
            File.WriteAllText(filePath, content, Encoding.UTF8)

        Catch ex As Exception
            Throw New Exception($"Failed to save file data{fileNumber:D3}.txt: {ex.Message}")
        End Try
    End Sub

    Private Function ShouldIncludeFile(filePath As String, projectType As String) As Boolean
        If Not File.Exists(filePath) Then
            Return False
        End If

        Dim extension As String = Path.GetExtension(filePath).ToLower()

        ' Skip media files for all project types
        If mediaExtensions.Contains(extension) Then
            Return False
        End If

        Select Case projectType
            Case "Visual Basic Desktop"
                Return vbDesktopExtensions.Contains(extension)
            Case "Asp Dotnet Core 8"
                Return aspCoreExtensions.Contains(extension)
            Case "Asp MVC 5"
                Return aspCoreExtensions.Contains(extension)
            Case Else
                Return False
        End Select
    End Function

    Private Function GetFileContent(filePath As String, projectType As String) As String
        Try
            Dim extension As String = Path.GetExtension(filePath).ToLower()
            Dim fileName As String = Path.GetFileName(filePath).ToLower()

            Select Case projectType
                Case "Visual Basic Desktop"
                    ' All VB files and SQL files get full text
                    If vbDesktopExtensions.Contains(extension) Then
                        Return File.ReadAllText(filePath)
                    Else
                        Return ""
                    End If

                Case "Asp Dotnet Core 8", "Asp MVC 5"
                    Select Case extension
                        Case ".cs"
                            Return File.ReadAllText(filePath)
                        Case ".sql"
                            ' SQL files get full text for all project types
                            Return File.ReadAllText(filePath)
                        Case ".cshtml"
                            ' Only include layout files (files starting with _)
                            If fileName.StartsWith("_") Then
                                Return File.ReadAllText(filePath)
                            Else
                                Return "" ' Skip non-layout CSHTML files
                            End If
                        Case ".css"
                            ' Only include site.css
                            If fileName = "site.css" Then
                                Return File.ReadAllText(filePath)
                            Else
                                Return "" ' Skip other CSS files
                            End If
                        Case ".js"
                            ' Only include site.js
                            If fileName = "site.js" Then
                                Return File.ReadAllText(filePath)
                            Else
                                Return "" ' Skip other JS files
                            End If
                        Case Else
                            Return ""
                    End Select

                Case Else
                    Return ""
            End Select
        Catch ex As Exception
            ' If file can't be read, return empty content
            Return ""
        End Try
    End Function

    Public Function EstimateTokenCount(checkedFiles As List(Of String), projectType As String) As Integer
        Dim tokenCount As Integer = 0

        For Each filePath In checkedFiles
            If ShouldIncludeFile(filePath, projectType) Then
                Try
                    Dim fileContent As String = GetFileContent(filePath, projectType)
                    If Not String.IsNullOrEmpty(fileContent) Then
                        tokenCount += EstimateTokenCount(fileContent)
                    End If
                Catch
                    ' Skip files that can't be read
                End Try
            End If
        Next

        Return tokenCount
    End Function

    Private Function EstimateTokenCount(text As String) As Integer
        ' Simple token estimation: approximately 4 characters per token
        Return Math.Ceiling(text.Length / 4)
    End Function
End Class

Public Class CombineResult
    Public Property Success As Boolean
    Public Property Message As String
    Public Property FileCount As Integer
    Public Property ProcessedFiles As Integer

    Public Sub New(success As Boolean, message As String)
        Me.Success = success
        Me.Message = message
        Me.FileCount = 0
        Me.ProcessedFiles = 0
    End Sub

    Public Sub New(success As Boolean, message As String, fileCount As Integer, processedFiles As Integer)
        Me.Success = success
        Me.Message = message
        Me.FileCount = fileCount
        Me.ProcessedFiles = processedFiles
    End Sub

End Class

==================== FILE: frmMain.Designer.vb ====================
<Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()>
Partial Class frmMain
    Inherits System.Windows.Forms.Form

    'Form overrides dispose to clean up the component list.
    <System.Diagnostics.DebuggerNonUserCode()>
    Protected Overrides Sub Dispose(disposing As Boolean)
        Try
            If disposing AndAlso components IsNot Nothing Then
                components.Dispose()
            End If
        Finally
            MyBase.Dispose(disposing)
        End Try
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    <System.Diagnostics.DebuggerStepThrough()>
    Private Sub InitializeComponent()
        components = New ComponentModel.Container()
        splitContainer1 = New SplitContainer()
        leftPanel = New Panel()
        grpFileSelection = New GroupBox()
        treeView1 = New TreeView()
        contextMenuStrip1 = New ContextMenuStrip(components)
        selectFileToolStripMenuItem = New ToolStripMenuItem()
        selectFolderToolStripMenuItem = New ToolStripMenuItem()
        pnlTreeActions = New Panel()
        btnCollapseAll = New Button()
        btnExpandAll = New Button()
        btnRefreshTree = New Button()
        rightPanel = New Panel()
        grpCombineActions = New GroupBox()
        pnlCombineControls = New Panel()
        progressBar1 = New ProgressBar()
        lblTokenCount = New Label()
        btnCombine = New Button()
        grpProjectSettings = New GroupBox()
        splitContainer2 = New SplitContainer()
        pnlProjectTop = New Panel()
        tlpProjectTop = New TableLayoutPanel()
        lblProjectType = New Label()
        cmbProjectType = New ComboBox()
        lblProjectTitle = New Label()
        txtProjectTitle = New TextBox()
        lblProjectInstructions = New Label()
        txtProjectInstructions = New TextBox()
        pnlProjectBottom = New Panel()
        lblOtherInstructions = New Label()
        txtOtherInstructions = New TextBox()
        grpTemplateManager = New GroupBox()
        tlpTemplateControls = New TableLayoutPanel()
        lblTemplateName = New Label()
        txtTemplateName = New TextBox()
        btnSaveTemplate = New Button()
        lblTemplate = New Label()
        cmbTemplate = New ComboBox()
        btnLoadTemplate = New Button()
        btnCopyTemplate = New Button()
        btnUpdateTemplate = New Button()
        menuStrip1 = New MenuStrip()
        fileToolStripMenuItem = New ToolStripMenuItem()
        selectProjectFolderToolStripMenuItem = New ToolStripMenuItem()
        toolStripSeparator2 = New ToolStripSeparator()
        backupProjectToolStripMenuItem = New ToolStripMenuItem()
        goToOutputToolStripMenuItem = New ToolStripMenuItem()
        toolStripSeparator3 = New ToolStripSeparator()
        makeShortcutToolStripMenuItem = New ToolStripMenuItem()
        toolStripSeparator1 = New ToolStripSeparator()
        exitToolStripMenuItem = New ToolStripMenuItem()
        settingsToolStripMenuItem = New ToolStripMenuItem()
        applicationSettingsToolStripMenuItem = New ToolStripMenuItem()
        helpToolStripMenuItem = New ToolStripMenuItem()
        aboutToolStripMenuItem = New ToolStripMenuItem()
        statusStrip1 = New StatusStrip()
        toolStripStatusLabel1 = New ToolStripStatusLabel()
        toolStripProgressBar1 = New ToolStripProgressBar()
        toolStripStatusLabelFiles = New ToolStripStatusLabel()
        folderBrowserDialog1 = New FolderBrowserDialog()
        openFileDialog1 = New OpenFileDialog()
        saveFileDialog1 = New SaveFileDialog()
        CType(splitContainer1, ComponentModel.ISupportInitialize).BeginInit()
        splitContainer1.Panel1.SuspendLayout()
        splitContainer1.Panel2.SuspendLayout()
        splitContainer1.SuspendLayout()
        leftPanel.SuspendLayout()
        grpFileSelection.SuspendLayout()
        contextMenuStrip1.SuspendLayout()
        pnlTreeActions.SuspendLayout()
        rightPanel.SuspendLayout()
        grpCombineActions.SuspendLayout()
        pnlCombineControls.SuspendLayout()
        grpProjectSettings.SuspendLayout()
        CType(splitContainer2, ComponentModel.ISupportInitialize).BeginInit()
        splitContainer2.Panel1.SuspendLayout()
        splitContainer2.Panel2.SuspendLayout()
        splitContainer2.SuspendLayout()
        pnlProjectTop.SuspendLayout()
        tlpProjectTop.SuspendLayout()
        pnlProjectBottom.SuspendLayout()
        grpTemplateManager.SuspendLayout()
        tlpTemplateControls.SuspendLayout()
        menuStrip1.SuspendLayout()
        statusStrip1.SuspendLayout()
        SuspendLayout()
        ' 
        ' splitContainer1
        ' 
        splitContainer1.Dock = DockStyle.Fill
        splitContainer1.Location = New Point(0, 24)
        splitContainer1.Name = "splitContainer1"
        ' 
        ' splitContainer1.Panel1
        ' 
        splitContainer1.Panel1.Controls.Add(leftPanel)
        ' 
        ' splitContainer1.Panel2
        ' 
        splitContainer1.Panel2.Controls.Add(rightPanel)
        splitContainer1.Size = New Size(1138, 646)
        splitContainer1.SplitterDistance = 379
        splitContainer1.SplitterWidth = 6
        splitContainer1.TabIndex = 0
        ' 
        ' leftPanel
        ' 
        leftPanel.Controls.Add(grpFileSelection)
        leftPanel.Dock = DockStyle.Fill
        leftPanel.Location = New Point(0, 0)
        leftPanel.Name = "leftPanel"
        leftPanel.Padding = New Padding(8)
        leftPanel.Size = New Size(379, 646)
        leftPanel.TabIndex = 0
        ' 
        ' grpFileSelection
        ' 
        grpFileSelection.Controls.Add(treeView1)
        grpFileSelection.Controls.Add(pnlTreeActions)
        grpFileSelection.Dock = DockStyle.Fill
        grpFileSelection.Font = New Font("Segoe UI", 9.75F, FontStyle.Bold)
        grpFileSelection.Location = New Point(8, 8)
        grpFileSelection.Name = "grpFileSelection"
        grpFileSelection.Padding = New Padding(8)
        grpFileSelection.Size = New Size(363, 630)
        grpFileSelection.TabIndex = 0
        grpFileSelection.TabStop = False
        grpFileSelection.Text = "File Selection"
        ' 
        ' treeView1
        ' 
        treeView1.CheckBoxes = True
        treeView1.ContextMenuStrip = contextMenuStrip1
        treeView1.Dock = DockStyle.Fill
        treeView1.Font = New Font("Segoe UI", 9F)
        treeView1.FullRowSelect = True
        treeView1.HideSelection = False
        treeView1.Location = New Point(8, 26)
        treeView1.Name = "treeView1"
        treeView1.Size = New Size(347, 556)
        treeView1.TabIndex = 0
        ' 
        ' contextMenuStrip1
        ' 
        contextMenuStrip1.Items.AddRange(New ToolStripItem() {selectFileToolStripMenuItem, selectFolderToolStripMenuItem})
        contextMenuStrip1.Name = "contextMenuStrip1"
        contextMenuStrip1.Size = New Size(142, 48)
        ' 
        ' selectFileToolStripMenuItem
        ' 
        selectFileToolStripMenuItem.Name = "selectFileToolStripMenuItem"
        selectFileToolStripMenuItem.Size = New Size(141, 22)
        selectFileToolStripMenuItem.Text = "Select File(s)"
        ' 
        ' selectFolderToolStripMenuItem
        ' 
        selectFolderToolStripMenuItem.Name = "selectFolderToolStripMenuItem"
        selectFolderToolStripMenuItem.Size = New Size(141, 22)
        selectFolderToolStripMenuItem.Text = "Select Folder"
        ' 
        ' pnlTreeActions
        ' 
        pnlTreeActions.Controls.Add(btnCollapseAll)
        pnlTreeActions.Controls.Add(btnExpandAll)
        pnlTreeActions.Controls.Add(btnRefreshTree)
        pnlTreeActions.Dock = DockStyle.Bottom
        pnlTreeActions.Location = New Point(8, 582)
        pnlTreeActions.Name = "pnlTreeActions"
        pnlTreeActions.Size = New Size(347, 40)
        pnlTreeActions.TabIndex = 1
        ' 
        ' btnCollapseAll
        ' 
        btnCollapseAll.BackColor = Color.FromArgb(CByte(255), CByte(193), CByte(7))
        btnCollapseAll.FlatStyle = FlatStyle.Flat
        btnCollapseAll.Font = New Font("Segoe UI", 9F)
        btnCollapseAll.ForeColor = Color.Black
        btnCollapseAll.Location = New Point(148, 7)
        btnCollapseAll.Name = "btnCollapseAll"
        btnCollapseAll.Size = New Size(70, 28)
        btnCollapseAll.TabIndex = 4
        btnCollapseAll.Text = "Collapse"
        btnCollapseAll.UseVisualStyleBackColor = False
        ' 
        ' btnExpandAll
        ' 
        btnExpandAll.BackColor = Color.FromArgb(CByte(40), CByte(167), CByte(69))
        btnExpandAll.FlatStyle = FlatStyle.Flat
        btnExpandAll.Font = New Font("Segoe UI", 9F)
        btnExpandAll.ForeColor = Color.White
        btnExpandAll.Location = New Point(74, 7)
        btnExpandAll.Name = "btnExpandAll"
        btnExpandAll.Size = New Size(70, 28)
        btnExpandAll.TabIndex = 3
        btnExpandAll.Text = "Expand"
        btnExpandAll.UseVisualStyleBackColor = False
        ' 
        ' btnRefreshTree
        ' 
        btnRefreshTree.BackColor = Color.FromArgb(CByte(108), CByte(117), CByte(125))
        btnRefreshTree.FlatStyle = FlatStyle.Flat
        btnRefreshTree.Font = New Font("Segoe UI", 9F)
        btnRefreshTree.ForeColor = Color.White
        btnRefreshTree.Location = New Point(0, 7)
        btnRefreshTree.Name = "btnRefreshTree"
        btnRefreshTree.Size = New Size(70, 28)
        btnRefreshTree.TabIndex = 2
        btnRefreshTree.Text = "Refresh"
        btnRefreshTree.UseVisualStyleBackColor = False
        ' 
        ' rightPanel
        ' 
        rightPanel.Controls.Add(grpCombineActions)
        rightPanel.Controls.Add(grpProjectSettings)
        rightPanel.Controls.Add(grpTemplateManager)
        rightPanel.Dock = DockStyle.Fill
        rightPanel.Location = New Point(0, 0)
        rightPanel.Name = "rightPanel"
        rightPanel.Padding = New Padding(4, 8, 8, 8)
        rightPanel.Size = New Size(753, 646)
        rightPanel.TabIndex = 0
        ' 
        ' grpCombineActions
        ' 
        grpCombineActions.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        grpCombineActions.Controls.Add(pnlCombineControls)
        grpCombineActions.Font = New Font("Segoe UI", 9.75F, FontStyle.Bold)
        grpCombineActions.Location = New Point(4, 541)
        grpCombineActions.Name = "grpCombineActions"
        grpCombineActions.Padding = New Padding(8)
        grpCombineActions.Size = New Size(741, 97)
        grpCombineActions.TabIndex = 2
        grpCombineActions.TabStop = False
        grpCombineActions.Text = "Combine Files"
        ' 
        ' pnlCombineControls
        ' 
        pnlCombineControls.Controls.Add(progressBar1)
        pnlCombineControls.Controls.Add(lblTokenCount)
        pnlCombineControls.Controls.Add(btnCombine)
        pnlCombineControls.Dock = DockStyle.Fill
        pnlCombineControls.Font = New Font("Segoe UI", 9F)
        pnlCombineControls.Location = New Point(8, 26)
        pnlCombineControls.Name = "pnlCombineControls"
        pnlCombineControls.Size = New Size(725, 63)
        pnlCombineControls.TabIndex = 0
        ' 
        ' progressBar1
        ' 
        progressBar1.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        progressBar1.Location = New Point(224, 31)
        progressBar1.Name = "progressBar1"
        progressBar1.Size = New Size(490, 20)
        progressBar1.Style = ProgressBarStyle.Continuous
        progressBar1.TabIndex = 5
        progressBar1.Visible = False
        ' 
        ' lblTokenCount
        ' 
        lblTokenCount.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        lblTokenCount.AutoSize = True
        lblTokenCount.Font = New Font("Segoe UI", 10F, FontStyle.Bold)
        lblTokenCount.ForeColor = Color.FromArgb(CByte(40), CByte(167), CByte(69))
        lblTokenCount.Location = New Point(219, 8)
        lblTokenCount.Name = "lblTokenCount"
        lblTokenCount.Size = New Size(108, 19)
        lblTokenCount.TabIndex = 4
        lblTokenCount.Text = "Token Count: 0"
        ' 
        ' btnCombine
        ' 
        btnCombine.BackColor = Color.FromArgb(CByte(220), CByte(53), CByte(69))
        btnCombine.FlatStyle = FlatStyle.Flat
        btnCombine.Font = New Font("Segoe UI", 12F, FontStyle.Bold)
        btnCombine.ForeColor = Color.White
        btnCombine.Location = New Point(8, 8)
        btnCombine.Name = "btnCombine"
        btnCombine.Size = New Size(200, 45)
        btnCombine.TabIndex = 3
        btnCombine.Text = "🔗 Combine Files"
        btnCombine.UseVisualStyleBackColor = False
        ' 
        ' grpProjectSettings
        ' 
        grpProjectSettings.Anchor = AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        grpProjectSettings.Controls.Add(splitContainer2)
        grpProjectSettings.Font = New Font("Segoe UI", 9.75F, FontStyle.Bold)
        grpProjectSettings.Location = New Point(4, 128)
        grpProjectSettings.Name = "grpProjectSettings"
        grpProjectSettings.Padding = New Padding(8)
        grpProjectSettings.Size = New Size(741, 410)
        grpProjectSettings.TabIndex = 1
        grpProjectSettings.TabStop = False
        grpProjectSettings.Text = "Project Configuration"
        ' 
        ' splitContainer2
        ' 
        splitContainer2.Dock = DockStyle.Fill
        splitContainer2.Location = New Point(8, 26)
        splitContainer2.Name = "splitContainer2"
        splitContainer2.Orientation = Orientation.Horizontal
        ' 
        ' splitContainer2.Panel1
        ' 
        splitContainer2.Panel1.Controls.Add(pnlProjectTop)
        ' 
        ' splitContainer2.Panel2
        ' 
        splitContainer2.Panel2.Controls.Add(pnlProjectBottom)
        splitContainer2.Size = New Size(725, 376)
        splitContainer2.SplitterDistance = 189
        splitContainer2.TabIndex = 0
        ' 
        ' pnlProjectTop
        ' 
        pnlProjectTop.Controls.Add(tlpProjectTop)
        pnlProjectTop.Dock = DockStyle.Fill
        pnlProjectTop.Location = New Point(0, 0)
        pnlProjectTop.Name = "pnlProjectTop"
        pnlProjectTop.Size = New Size(725, 189)
        pnlProjectTop.TabIndex = 0
        ' 
        ' tlpProjectTop
        ' 
        tlpProjectTop.ColumnCount = 2
        tlpProjectTop.ColumnStyles.Add(New ColumnStyle(SizeType.Absolute, 130F))
        tlpProjectTop.ColumnStyles.Add(New ColumnStyle(SizeType.Percent, 100F))
        tlpProjectTop.Controls.Add(lblProjectType, 0, 0)
        tlpProjectTop.Controls.Add(cmbProjectType, 1, 0)
        tlpProjectTop.Controls.Add(lblProjectTitle, 0, 1)
        tlpProjectTop.Controls.Add(txtProjectTitle, 1, 1)
        tlpProjectTop.Controls.Add(lblProjectInstructions, 0, 2)
        tlpProjectTop.Controls.Add(txtProjectInstructions, 1, 2)
        tlpProjectTop.Dock = DockStyle.Fill
        tlpProjectTop.Font = New Font("Segoe UI", 9F)
        tlpProjectTop.Location = New Point(0, 0)
        tlpProjectTop.Name = "tlpProjectTop"
        tlpProjectTop.RowCount = 3
        tlpProjectTop.RowStyles.Add(New RowStyle(SizeType.Absolute, 35F))
        tlpProjectTop.RowStyles.Add(New RowStyle(SizeType.Absolute, 35F))
        tlpProjectTop.RowStyles.Add(New RowStyle(SizeType.Percent, 100F))
        tlpProjectTop.Size = New Size(725, 189)
        tlpProjectTop.TabIndex = 0
        ' 
        ' lblProjectType
        ' 
        lblProjectType.Anchor = AnchorStyles.Left Or AnchorStyles.Right
        lblProjectType.AutoSize = True
        lblProjectType.Location = New Point(3, 10)
        lblProjectType.Name = "lblProjectType"
        lblProjectType.Size = New Size(124, 15)
        lblProjectType.TabIndex = 0
        lblProjectType.Text = "Project Type:"
        ' 
        ' cmbProjectType
        ' 
        cmbProjectType.Anchor = AnchorStyles.Left Or AnchorStyles.Right
        cmbProjectType.DropDownStyle = ComboBoxStyle.DropDownList
        cmbProjectType.FormattingEnabled = True
        cmbProjectType.Location = New Point(133, 6)
        cmbProjectType.Name = "cmbProjectType"
        cmbProjectType.Size = New Size(589, 23)
        cmbProjectType.TabIndex = 1
        ' 
        ' lblProjectTitle
        ' 
        lblProjectTitle.Anchor = AnchorStyles.Left Or AnchorStyles.Right
        lblProjectTitle.AutoSize = True
        lblProjectTitle.Location = New Point(3, 45)
        lblProjectTitle.Name = "lblProjectTitle"
        lblProjectTitle.Size = New Size(124, 15)
        lblProjectTitle.TabIndex = 2
        lblProjectTitle.Text = "Project Title:"
        ' 
        ' txtProjectTitle
        ' 
        txtProjectTitle.Anchor = AnchorStyles.Left Or AnchorStyles.Right
        txtProjectTitle.Location = New Point(133, 41)
        txtProjectTitle.Name = "txtProjectTitle"
        txtProjectTitle.Size = New Size(589, 23)
        txtProjectTitle.TabIndex = 3
        ' 
        ' lblProjectInstructions
        ' 
        lblProjectInstructions.AutoSize = True
        lblProjectInstructions.Location = New Point(3, 70)
        lblProjectInstructions.Name = "lblProjectInstructions"
        lblProjectInstructions.Size = New Size(112, 15)
        lblProjectInstructions.TabIndex = 4
        lblProjectInstructions.Text = "Project Instructions:"
        ' 
        ' txtProjectInstructions
        ' 
        txtProjectInstructions.Anchor = AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        txtProjectInstructions.Font = New Font("Consolas", 9F)
        txtProjectInstructions.Location = New Point(133, 73)
        txtProjectInstructions.Multiline = True
        txtProjectInstructions.Name = "txtProjectInstructions"
        txtProjectInstructions.ScrollBars = ScrollBars.Vertical
        txtProjectInstructions.Size = New Size(589, 113)
        txtProjectInstructions.TabIndex = 5
        ' 
        ' pnlProjectBottom
        ' 
        pnlProjectBottom.Controls.Add(lblOtherInstructions)
        pnlProjectBottom.Controls.Add(txtOtherInstructions)
        pnlProjectBottom.Dock = DockStyle.Fill
        pnlProjectBottom.Location = New Point(0, 0)
        pnlProjectBottom.Name = "pnlProjectBottom"
        pnlProjectBottom.Size = New Size(725, 183)
        pnlProjectBottom.TabIndex = 0
        ' 
        ' lblOtherInstructions
        ' 
        lblOtherInstructions.AutoSize = True
        lblOtherInstructions.Font = New Font("Segoe UI", 9F)
        lblOtherInstructions.Location = New Point(3, 8)
        lblOtherInstructions.Name = "lblOtherInstructions"
        lblOtherInstructions.Size = New Size(105, 15)
        lblOtherInstructions.TabIndex = 6
        lblOtherInstructions.Text = "Other Instructions:"
        ' 
        ' txtOtherInstructions
        ' 
        txtOtherInstructions.Anchor = AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        txtOtherInstructions.Font = New Font("Consolas", 9F)
        txtOtherInstructions.Location = New Point(133, 6)
        txtOtherInstructions.Multiline = True
        txtOtherInstructions.Name = "txtOtherInstructions"
        txtOtherInstructions.ScrollBars = ScrollBars.Vertical
        txtOtherInstructions.Size = New Size(589, 174)
        txtOtherInstructions.TabIndex = 7
        ' 
        ' grpTemplateManager
        ' 
        grpTemplateManager.Controls.Add(tlpTemplateControls)
        grpTemplateManager.Dock = DockStyle.Top
        grpTemplateManager.Font = New Font("Segoe UI", 9.75F, FontStyle.Bold)
        grpTemplateManager.Location = New Point(4, 8)
        grpTemplateManager.Name = "grpTemplateManager"
        grpTemplateManager.Padding = New Padding(8)
        grpTemplateManager.Size = New Size(741, 120)
        grpTemplateManager.TabIndex = 0
        grpTemplateManager.TabStop = False
        grpTemplateManager.Text = "Template Manager"
        ' 
        ' tlpTemplateControls
        ' 
        tlpTemplateControls.ColumnCount = 4
        tlpTemplateControls.ColumnStyles.Add(New ColumnStyle(SizeType.Absolute, 131F))
        tlpTemplateControls.ColumnStyles.Add(New ColumnStyle(SizeType.Percent, 76.31579F))
        tlpTemplateControls.ColumnStyles.Add(New ColumnStyle(SizeType.Percent, 12.2291021F))
        tlpTemplateControls.ColumnStyles.Add(New ColumnStyle(SizeType.Percent, 11.4551086F))
        tlpTemplateControls.Controls.Add(lblTemplateName, 0, 0)
        tlpTemplateControls.Controls.Add(txtTemplateName, 1, 0)
        tlpTemplateControls.Controls.Add(btnSaveTemplate, 2, 0)
        tlpTemplateControls.Controls.Add(lblTemplate, 0, 1)
        tlpTemplateControls.Controls.Add(cmbTemplate, 1, 1)
        tlpTemplateControls.Controls.Add(btnLoadTemplate, 2, 1)
        tlpTemplateControls.Controls.Add(btnCopyTemplate, 3, 1)
        tlpTemplateControls.Controls.Add(btnUpdateTemplate, 3, 0)
        tlpTemplateControls.Dock = DockStyle.Fill
        tlpTemplateControls.Font = New Font("Segoe UI", 9F)
        tlpTemplateControls.Location = New Point(8, 26)
        tlpTemplateControls.Name = "tlpTemplateControls"
        tlpTemplateControls.RowCount = 2
        tlpTemplateControls.RowStyles.Add(New RowStyle(SizeType.Percent, 50F))
        tlpTemplateControls.RowStyles.Add(New RowStyle(SizeType.Percent, 50F))
        tlpTemplateControls.Size = New Size(725, 86)
        tlpTemplateControls.TabIndex = 0
        ' 
        ' lblTemplateName
        ' 
        lblTemplateName.Anchor = AnchorStyles.Left Or AnchorStyles.Right
        lblTemplateName.AutoSize = True
        lblTemplateName.Location = New Point(3, 14)
        lblTemplateName.Name = "lblTemplateName"
        lblTemplateName.Size = New Size(125, 15)
        lblTemplateName.TabIndex = 0
        lblTemplateName.Text = "Template Name:"
        ' 
        ' txtTemplateName
        ' 
        txtTemplateName.Anchor = AnchorStyles.Left Or AnchorStyles.Right
        txtTemplateName.Location = New Point(134, 10)
        txtTemplateName.Name = "txtTemplateName"
        txtTemplateName.Size = New Size(447, 23)
        txtTemplateName.TabIndex = 1
        ' 
        ' btnSaveTemplate
        ' 
        btnSaveTemplate.Anchor = AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        btnSaveTemplate.BackColor = Color.FromArgb(CByte(40), CByte(167), CByte(69))
        btnSaveTemplate.FlatStyle = FlatStyle.Flat
        btnSaveTemplate.ForeColor = Color.White
        btnSaveTemplate.Location = New Point(587, 3)
        btnSaveTemplate.Name = "btnSaveTemplate"
        btnSaveTemplate.Size = New Size(66, 37)
        btnSaveTemplate.TabIndex = 2
        btnSaveTemplate.Text = "Save"
        btnSaveTemplate.UseVisualStyleBackColor = False
        ' 
        ' lblTemplate
        ' 
        lblTemplate.Anchor = AnchorStyles.Left Or AnchorStyles.Right
        lblTemplate.AutoSize = True
        lblTemplate.Location = New Point(3, 57)
        lblTemplate.Name = "lblTemplate"
        lblTemplate.Size = New Size(125, 15)
        lblTemplate.TabIndex = 3
        lblTemplate.Text = "Select Template:"
        ' 
        ' cmbTemplate
        ' 
        cmbTemplate.Anchor = AnchorStyles.Left Or AnchorStyles.Right
        cmbTemplate.DropDownStyle = ComboBoxStyle.DropDownList
        cmbTemplate.FormattingEnabled = True
        cmbTemplate.Location = New Point(134, 53)
        cmbTemplate.Name = "cmbTemplate"
        cmbTemplate.Size = New Size(447, 23)
        cmbTemplate.TabIndex = 4
        ' 
        ' btnLoadTemplate
        ' 
        btnLoadTemplate.Anchor = AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        btnLoadTemplate.BackColor = Color.FromArgb(CByte(0), CByte(120), CByte(215))
        btnLoadTemplate.FlatStyle = FlatStyle.Flat
        btnLoadTemplate.ForeColor = Color.White
        btnLoadTemplate.Location = New Point(587, 46)
        btnLoadTemplate.Name = "btnLoadTemplate"
        btnLoadTemplate.Size = New Size(66, 37)
        btnLoadTemplate.TabIndex = 5
        btnLoadTemplate.Text = "Load"
        btnLoadTemplate.UseVisualStyleBackColor = False
        ' 
        ' btnCopyTemplate
        ' 
        btnCopyTemplate.Anchor = AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        btnCopyTemplate.BackColor = Color.FromArgb(CByte(108), CByte(117), CByte(125))
        btnCopyTemplate.FlatStyle = FlatStyle.Flat
        btnCopyTemplate.ForeColor = Color.White
        btnCopyTemplate.Location = New Point(659, 46)
        btnCopyTemplate.Name = "btnCopyTemplate"
        btnCopyTemplate.Size = New Size(63, 37)
        btnCopyTemplate.TabIndex = 6
        btnCopyTemplate.Text = "Copy"
        btnCopyTemplate.UseVisualStyleBackColor = False
        ' 
        ' btnUpdateTemplate
        ' 
        btnUpdateTemplate.Anchor = AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        btnUpdateTemplate.BackColor = Color.FromArgb(CByte(255), CByte(193), CByte(7))
        btnUpdateTemplate.FlatStyle = FlatStyle.Flat
        btnUpdateTemplate.ForeColor = Color.Black
        btnUpdateTemplate.Location = New Point(659, 3)
        btnUpdateTemplate.Name = "btnUpdateTemplate"
        btnUpdateTemplate.Size = New Size(63, 37)
        btnUpdateTemplate.TabIndex = 7
        btnUpdateTemplate.Text = "Update"
        btnUpdateTemplate.UseVisualStyleBackColor = False
        ' 
        ' menuStrip1
        ' 
        menuStrip1.Items.AddRange(New ToolStripItem() {fileToolStripMenuItem, settingsToolStripMenuItem, helpToolStripMenuItem})
        menuStrip1.Location = New Point(0, 0)
        menuStrip1.Name = "menuStrip1"
        menuStrip1.Size = New Size(1138, 24)
        menuStrip1.TabIndex = 1
        ' 
        ' fileToolStripMenuItem
        ' 
        fileToolStripMenuItem.DropDownItems.AddRange(New ToolStripItem() {selectProjectFolderToolStripMenuItem, toolStripSeparator2, backupProjectToolStripMenuItem, goToOutputToolStripMenuItem, toolStripSeparator3, makeShortcutToolStripMenuItem, toolStripSeparator1, exitToolStripMenuItem})
        fileToolStripMenuItem.Name = "fileToolStripMenuItem"
        fileToolStripMenuItem.Size = New Size(37, 20)
        fileToolStripMenuItem.Text = "&File"
        ' 
        ' selectProjectFolderToolStripMenuItem
        ' 
        selectProjectFolderToolStripMenuItem.Name = "selectProjectFolderToolStripMenuItem"
        selectProjectFolderToolStripMenuItem.Size = New Size(181, 22)
        selectProjectFolderToolStripMenuItem.Text = "Select Project &Folder"
        ' 
        ' toolStripSeparator2
        ' 
        toolStripSeparator2.Name = "toolStripSeparator2"
        toolStripSeparator2.Size = New Size(178, 6)
        ' 
        ' backupProjectToolStripMenuItem
        ' 
        backupProjectToolStripMenuItem.Name = "backupProjectToolStripMenuItem"
        backupProjectToolStripMenuItem.Size = New Size(181, 22)
        backupProjectToolStripMenuItem.Text = "&Backup Project"
        ' 
        ' goToOutputToolStripMenuItem
        ' 
        goToOutputToolStripMenuItem.Name = "goToOutputToolStripMenuItem"
        goToOutputToolStripMenuItem.Size = New Size(181, 22)
        goToOutputToolStripMenuItem.Text = "&Go to Output"
        ' 
        ' toolStripSeparator3
        ' 
        toolStripSeparator3.Name = "toolStripSeparator3"
        toolStripSeparator3.Size = New Size(178, 6)
        ' 
        ' makeShortcutToolStripMenuItem
        ' 
        makeShortcutToolStripMenuItem.Name = "makeShortcutToolStripMenuItem"
        makeShortcutToolStripMenuItem.Size = New Size(181, 22)
        makeShortcutToolStripMenuItem.Text = "Make &Shortcut"
        ' 
        ' toolStripSeparator1
        ' 
        toolStripSeparator1.Name = "toolStripSeparator1"
        toolStripSeparator1.Size = New Size(178, 6)
        ' 
        ' exitToolStripMenuItem
        ' 
        exitToolStripMenuItem.Name = "exitToolStripMenuItem"
        exitToolStripMenuItem.ShortcutKeys = Keys.Alt Or Keys.F4
        exitToolStripMenuItem.Size = New Size(181, 22)
        exitToolStripMenuItem.Text = "E&xit"
        ' 
        ' settingsToolStripMenuItem
        ' 
        settingsToolStripMenuItem.DropDownItems.AddRange(New ToolStripItem() {applicationSettingsToolStripMenuItem})
        settingsToolStripMenuItem.Name = "settingsToolStripMenuItem"
        settingsToolStripMenuItem.Size = New Size(61, 20)
        settingsToolStripMenuItem.Text = "&Settings"
        ' 
        ' applicationSettingsToolStripMenuItem
        ' 
        applicationSettingsToolStripMenuItem.Name = "applicationSettingsToolStripMenuItem"
        applicationSettingsToolStripMenuItem.Size = New Size(180, 22)
        applicationSettingsToolStripMenuItem.Text = "&Application Settings"
        ' 
        ' helpToolStripMenuItem
        ' 
        helpToolStripMenuItem.DropDownItems.AddRange(New ToolStripItem() {aboutToolStripMenuItem})
        helpToolStripMenuItem.Name = "helpToolStripMenuItem"
        helpToolStripMenuItem.Size = New Size(44, 20)
        helpToolStripMenuItem.Text = "&Help"
        ' 
        ' aboutToolStripMenuItem
        ' 
        aboutToolStripMenuItem.Name = "aboutToolStripMenuItem"
        aboutToolStripMenuItem.Size = New Size(107, 22)
        aboutToolStripMenuItem.Text = "&About"
        ' 
        ' statusStrip1
        ' 
        statusStrip1.Items.AddRange(New ToolStripItem() {toolStripStatusLabel1, toolStripProgressBar1, toolStripStatusLabelFiles})
        statusStrip1.Location = New Point(0, 670)
        statusStrip1.Name = "statusStrip1"
        statusStrip1.Padding = New Padding(1, 0, 16, 0)
        statusStrip1.Size = New Size(1138, 22)
        statusStrip1.TabIndex = 2
        ' 
        ' toolStripStatusLabel1
        ' 
        toolStripStatusLabel1.Name = "toolStripStatusLabel1"
        toolStripStatusLabel1.Size = New Size(39, 17)
        toolStripStatusLabel1.Text = "Ready"
        ' 
        ' toolStripProgressBar1
        ' 
        toolStripProgressBar1.Name = "toolStripProgressBar1"
        toolStripProgressBar1.Size = New Size(100, 16)
        toolStripProgressBar1.Visible = False
        ' 
        ' toolStripStatusLabelFiles
        ' 
        toolStripStatusLabelFiles.Name = "toolStripStatusLabelFiles"
        toolStripStatusLabelFiles.Size = New Size(100, 17)
        toolStripStatusLabelFiles.Text = "Files: 0 | Size: 0 KB"
        ' 
        ' folderBrowserDialog1
        ' 
        folderBrowserDialog1.Description = "Select project folder"
        ' 
        ' openFileDialog1
        ' 
        openFileDialog1.Filter = "All Files (*.*)|*.*|VB Files (*.vb)|*.vb|C# Files (*.cs)|*.cs|Web Files (*.html;*.css;*.js)|*.html;*.css;*.js"
        openFileDialog1.Multiselect = True
        openFileDialog1.Title = "Select files to add"
        ' 
        ' saveFileDialog1
        ' 
        saveFileDialog1.Filter = "Text Files (*.txt)|*.txt|All Files (*.*)|*.*"
        saveFileDialog1.Title = "Save combined files to"
        ' 
        ' frmMain
        ' 
        AutoScaleDimensions = New SizeF(7F, 15F)
        AutoScaleMode = AutoScaleMode.Font
        BackColor = Color.FromArgb(CByte(248), CByte(249), CByte(250))
        ClientSize = New Size(1138, 692)
        Controls.Add(splitContainer1)
        Controls.Add(statusStrip1)
        Controls.Add(menuStrip1)
        Font = New Font("Segoe UI", 9F)
        MainMenuStrip = menuStrip1
        MinimumSize = New Size(1000, 600)
        Name = "frmMain"
        StartPosition = FormStartPosition.CenterScreen
        Text = "RepoBundle - Project File Combiner v2.0"
        splitContainer1.Panel1.ResumeLayout(False)
        splitContainer1.Panel2.ResumeLayout(False)
        CType(splitContainer1, ComponentModel.ISupportInitialize).EndInit()
        splitContainer1.ResumeLayout(False)
        leftPanel.ResumeLayout(False)
        grpFileSelection.ResumeLayout(False)
        contextMenuStrip1.ResumeLayout(False)
        pnlTreeActions.ResumeLayout(False)
        rightPanel.ResumeLayout(False)
        grpCombineActions.ResumeLayout(False)
        pnlCombineControls.ResumeLayout(False)
        pnlCombineControls.PerformLayout()
        grpProjectSettings.ResumeLayout(False)
        splitContainer2.Panel1.ResumeLayout(False)
        splitContainer2.Panel2.ResumeLayout(False)
        CType(splitContainer2, ComponentModel.ISupportInitialize).EndInit()
        splitContainer2.ResumeLayout(False)
        pnlProjectTop.ResumeLayout(False)
        tlpProjectTop.ResumeLayout(False)
        tlpProjectTop.PerformLayout()
        pnlProjectBottom.ResumeLayout(False)
        pnlProjectBottom.PerformLayout()
        grpTemplateManager.ResumeLayout(False)
        tlpTemplateControls.ResumeLayout(False)
        tlpTemplateControls.PerformLayout()
        menuStrip1.ResumeLayout(False)
        menuStrip1.PerformLayout()
        statusStrip1.ResumeLayout(False)
        statusStrip1.PerformLayout()
        ResumeLayout(False)
        PerformLayout()
    End Sub

    ' Control declarations
    Friend WithEvents splitContainer1 As SplitContainer
    Friend WithEvents leftPanel As Panel
    Friend WithEvents rightPanel As Panel

    ' File Selection Group
    Friend WithEvents grpFileSelection As GroupBox
    Friend WithEvents treeView1 As TreeView
    Friend WithEvents contextMenuStrip1 As ContextMenuStrip
    Friend WithEvents selectFileToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents selectFolderToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents pnlTreeActions As Panel
    Friend WithEvents btnRefreshTree As Button
    Friend WithEvents btnExpandAll As Button
    Friend WithEvents btnCollapseAll As Button

    ' Template Manager Group
    Friend WithEvents grpTemplateManager As GroupBox
    Friend WithEvents tlpTemplateControls As TableLayoutPanel
    Friend WithEvents lblTemplateName As Label
    Friend WithEvents txtTemplateName As TextBox
    Friend WithEvents btnSaveTemplate As Button
    Friend WithEvents lblTemplate As Label
    Friend WithEvents cmbTemplate As ComboBox
    Friend WithEvents btnLoadTemplate As Button
    Friend WithEvents btnCopyTemplate As Button
    Friend WithEvents btnUpdateTemplate As Button

    ' Project Settings Group with SplitContainer
    Friend WithEvents grpProjectSettings As GroupBox
    Friend WithEvents splitContainer2 As SplitContainer
    Friend WithEvents pnlProjectTop As Panel
    Friend WithEvents tlpProjectTop As TableLayoutPanel
    Friend WithEvents lblProjectType As Label
    Friend WithEvents cmbProjectType As ComboBox
    Friend WithEvents lblProjectTitle As Label
    Friend WithEvents txtProjectTitle As TextBox
    Friend WithEvents lblProjectInstructions As Label
    Friend WithEvents txtProjectInstructions As TextBox
    Friend WithEvents pnlProjectBottom As Panel
    Friend WithEvents lblOtherInstructions As Label
    Friend WithEvents txtOtherInstructions As TextBox

    ' Combine Actions Group
    Friend WithEvents grpCombineActions As GroupBox
    Friend WithEvents pnlCombineControls As Panel
    Friend WithEvents btnCombine As Button
    Friend WithEvents lblTokenCount As Label
    Friend WithEvents progressBar1 As ProgressBar

    ' Menu and Status
    Friend WithEvents menuStrip1 As MenuStrip
    Friend WithEvents fileToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents selectProjectFolderToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents toolStripSeparator2 As ToolStripSeparator
    Friend WithEvents backupProjectToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents goToOutputToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents toolStripSeparator3 As ToolStripSeparator
    Friend WithEvents makeShortcutToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents toolStripSeparator1 As ToolStripSeparator
    Friend WithEvents exitToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents settingsToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents applicationSettingsToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents helpToolStripMenuItem As ToolStripMenuItem
    Friend WithEvents aboutToolStripMenuItem As ToolStripMenuItem

    Friend WithEvents statusStrip1 As StatusStrip
    Friend WithEvents toolStripStatusLabel1 As ToolStripStatusLabel
    Friend WithEvents toolStripProgressBar1 As ToolStripProgressBar
    Friend WithEvents toolStripStatusLabelFiles As ToolStripStatusLabel

    ' Dialogs
    Friend WithEvents folderBrowserDialog1 As FolderBrowserDialog
    Friend WithEvents openFileDialog1 As OpenFileDialog
    Friend WithEvents saveFileDialog1 As SaveFileDialog

End Class

==================== FILE: frmMain.vb ====================
Imports System.IO
Imports System.Text
Imports System.Linq
Imports System.IO.Compression
Imports System.Diagnostics

Public Class frmMain
    Private iniHelper As IniHelper
    Private templateIni As IniHelper
    Private projectFolder As String = ""
    Private outputFolder As String = ""
    Private databaseFiles As New List(Of String)
    Private excludedFolders As New List(Of String) ' Added for dynamic excluded folders
    Private includeDatabase As Boolean = False
    Private lastSelectedTemplate As String = ""
    Private lastSelectedProjectType As String = ""
    Private projectTitle As String = ""
    Private projectInstructions As String = ""
    Private otherInstructions As String = ""
    Private isUpdatingNodes As Boolean = False
    Private isLoadingTemplate As Boolean = False

    Private Sub InitializeApplication()
        ' Initialize INI helpers
        iniHelper = New IniHelper(Path.Combine(Application.StartupPath, "config.ini"))
        templateIni = New IniHelper(Path.Combine(Application.StartupPath, "template.ini"))

        ' Initialize project types
        cmbProjectType.Items.AddRange({"Visual Basic Desktop", "Asp MVC 5", "Asp Dotnet Core 8"})

        ' Load configuration
        LoadConfiguration()
        LoadTemplates()

        ' Set default output folder if not configured
        If String.IsNullOrEmpty(outputFolder) Then
            outputFolder = Path.Combine(Application.StartupPath, "Output")
        End If

        If Not Directory.Exists(outputFolder) Then
            Try
                Directory.CreateDirectory(outputFolder)
                toolStripStatusLabel1.Text = "Created default output folder: " & outputFolder
            Catch ex As Exception
                toolStripStatusLabel1.Text = "Warning: Could not create default output folder"
            End Try
        End If

        ' Restore last selected project type
        If Not String.IsNullOrEmpty(lastSelectedProjectType) Then
            For i As Integer = 0 To cmbProjectType.Items.Count - 1
                If cmbProjectType.Items(i).ToString().Equals(lastSelectedProjectType, StringComparison.OrdinalIgnoreCase) Then
                    cmbProjectType.SelectedIndex = i
                    Exit For
                End If
            Next
        Else
            cmbProjectType.SelectedIndex = 0
        End If

        ' Load project folder if configured
        If Not String.IsNullOrEmpty(projectFolder) AndAlso Directory.Exists(projectFolder) Then
            LoadProjectFolder()
        End If

        ' Set initial button states
        btnLoadTemplate.Enabled = (cmbTemplate.Items.Count > 0 AndAlso cmbTemplate.SelectedItem IsNot Nothing)
        btnCopyTemplate.Enabled = (cmbTemplate.Items.Count > 0 AndAlso cmbTemplate.SelectedItem IsNot Nothing)
        btnUpdateTemplate.Enabled = (cmbTemplate.Items.Count > 0 AndAlso cmbTemplate.SelectedItem IsNot Nothing)

        ' Add event handlers for auto-save
        AddHandler txtProjectTitle.TextChanged, AddressOf ConfigurationChanged
        AddHandler txtProjectInstructions.TextChanged, AddressOf ConfigurationChanged
        AddHandler txtOtherInstructions.TextChanged, AddressOf ConfigurationChanged

        ' Add event handlers for split container position saving
        AddHandler splitContainer1.SplitterMoved, AddressOf SplitContainer_SplitterMoved
        AddHandler splitContainer2.SplitterMoved, AddressOf SplitContainer_SplitterMoved

        ' Set status
        If String.IsNullOrEmpty(projectFolder) Then
            toolStripStatusLabel1.Text = "Ready - Select project folder to begin"
        Else
            toolStripStatusLabel1.Text = "Ready - Project folder loaded: " & Path.GetFileName(projectFolder)
        End If
    End Sub

    Private Sub LoadConfiguration()
        ' Load main configuration
        projectFolder = iniHelper.ReadValue("Main", "ProjectFolder", "")
        outputFolder = iniHelper.ReadValue("Main", "OutputFolder", "")
        includeDatabase = Boolean.Parse(iniHelper.ReadValue("Main", "IncludeDatabase", "False"))
        lastSelectedTemplate = iniHelper.ReadValue("Main", "LastSelectedTemplate", "")
        lastSelectedProjectType = iniHelper.ReadValue("Main", "LastSelectedProjectType", "")

        ' Load excluded folders - FIXED: Added dynamic excluded folders loading
        Dim excludedFoldersString As String = iniHelper.ReadValue("Backup", "ExcludedFolders", ".git,.vs,.svn,bin,obj")
        excludedFolders.Clear()
        If Not String.IsNullOrWhiteSpace(excludedFoldersString) Then
            Dim folders() As String = excludedFoldersString.Split(New Char() {","c, ";"c}, StringSplitOptions.RemoveEmptyEntries)
            For Each folder In folders
                Dim trimmedFolder As String = folder.Trim()
                If Not String.IsNullOrWhiteSpace(trimmedFolder) Then
                    excludedFolders.Add(trimmedFolder)
                End If
            Next
        End If

        ' Ensure we have some excluded folders (but not too restrictive)
        If excludedFolders.Count = 0 Then
            excludedFolders.AddRange({".git", ".vs", ".svn", "bin", "obj"})
        End If

        ' Load project information
        projectTitle = iniHelper.ReadValue("Project", "Title", "")
        projectInstructions = iniHelper.ReadValue("Project", "Instructions", "").Replace("\n", vbCrLf)
        otherInstructions = iniHelper.ReadValue("Project", "OtherInstructions", "").Replace("\n", vbCrLf)

        ' Load split container positions
        Dim splitter1Pos As String = iniHelper.ReadValue("UI", "SplitContainer1Position", "379")
        Dim splitter2Pos As String = iniHelper.ReadValue("UI", "SplitContainer2Position", "240")

        Try
            splitContainer1.SplitterDistance = Integer.Parse(splitter1Pos)
            splitContainer2.SplitterDistance = Integer.Parse(splitter2Pos)
        Catch
            ' Use defaults if parsing fails
        End Try

        ' Load database files
        databaseFiles.Clear()
        Dim dbFileKeys As List(Of String) = iniHelper.GetKeys("DatabaseFiles")
        For Each key In dbFileKeys
            Dim dbFile As String = iniHelper.ReadValue("DatabaseFiles", key, "")
            If Not String.IsNullOrEmpty(dbFile) AndAlso File.Exists(dbFile) Then
                databaseFiles.Add(dbFile)
            End If
        Next

        ' Update UI
        txtProjectTitle.Text = projectTitle
        txtProjectInstructions.Text = projectInstructions
        txtOtherInstructions.Text = otherInstructions
    End Sub

    Private Sub SaveConfiguration()
        Try
            ' Save main configuration
            iniHelper.WriteValue("Main", "ProjectFolder", projectFolder)
            iniHelper.WriteValue("Main", "OutputFolder", outputFolder)
            iniHelper.WriteValue("Main", "IncludeDatabase", includeDatabase.ToString())
            iniHelper.WriteValue("Main", "LastSelectedTemplate", If(cmbTemplate.SelectedItem?.ToString(), ""))
            iniHelper.WriteValue("Main", "LastSelectedProjectType", If(cmbProjectType.SelectedItem?.ToString(), ""))

            ' FIXED: Save excluded folders
            iniHelper.WriteValue("Backup", "ExcludedFolders", String.Join(",", excludedFolders))

            ' Save project information
            iniHelper.WriteValue("Project", "Title", txtProjectTitle.Text.Trim())
            iniHelper.WriteValue("Project", "Instructions", txtProjectInstructions.Text.Replace(vbCrLf, "\n"))
            iniHelper.WriteValue("Project", "OtherInstructions", txtOtherInstructions.Text.Replace(vbCrLf, "\n"))

            ' Save split container positions
            iniHelper.WriteValue("UI", "SplitContainer1Position", splitContainer1.SplitterDistance.ToString())
            iniHelper.WriteValue("UI", "SplitContainer2Position", splitContainer2.SplitterDistance.ToString())

            ' Clear and save database files
            Dim dbFileKeys As List(Of String) = iniHelper.GetKeys("DatabaseFiles")
            For Each key In dbFileKeys
                iniHelper.DeleteKey("DatabaseFiles", key)
            Next

            For i As Integer = 0 To databaseFiles.Count - 1
                iniHelper.WriteValue("DatabaseFiles", "File" & (i + 1).ToString(), databaseFiles(i))
            Next

        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error saving configuration: " & ex.Message
        End Try
    End Sub

    Private Sub SplitContainer_SplitterMoved(sender As Object, e As SplitterEventArgs)
        ' Auto-save split container positions
        Static lastSave As DateTime = DateTime.MinValue
        If DateTime.Now.Subtract(lastSave).TotalSeconds > 1 Then
            SaveConfiguration()
            lastSave = DateTime.Now
        End If
    End Sub

    Private Sub ConfigurationChanged(sender As Object, e As EventArgs)
        ' Auto-save configuration when text boxes change (with delay to avoid constant saving)
        Static lastSave As DateTime = DateTime.MinValue
        If DateTime.Now.Subtract(lastSave).TotalSeconds > 2 Then
            SaveConfiguration()
            lastSave = DateTime.Now
        End If
    End Sub

    Private Sub LoadTemplates()
        ' Store current selection before clearing
        Dim currentSelection As String = ""
        If cmbTemplate.SelectedItem IsNot Nothing Then
            currentSelection = cmbTemplate.SelectedItem.ToString()
        End If

        cmbTemplate.Items.Clear()

        Try
            ' Get all template sections
            Dim sections As List(Of String) = templateIni.GetSections()

            For Each section In sections
                If section.StartsWith("Template_") Then
                    Dim templateName As String = templateIni.ReadValue(section, "Name", "")
                    If Not String.IsNullOrWhiteSpace(templateName) Then
                        cmbTemplate.Items.Add(templateName)
                    End If
                End If
            Next

            ' Restore previous selection if it exists
            If Not String.IsNullOrEmpty(currentSelection) Then
                For i As Integer = 0 To cmbTemplate.Items.Count - 1
                    If cmbTemplate.Items(i).ToString().Equals(currentSelection, StringComparison.OrdinalIgnoreCase) Then
                        cmbTemplate.SelectedIndex = i
                        Return
                    End If
                Next
            End If

            ' Try to restore last selected template from config
            If Not String.IsNullOrEmpty(lastSelectedTemplate) Then
                For i As Integer = 0 To cmbTemplate.Items.Count - 1
                    If cmbTemplate.Items(i).ToString().Equals(lastSelectedTemplate, StringComparison.OrdinalIgnoreCase) Then
                        cmbTemplate.SelectedIndex = i
                        Return
                    End If
                Next
            End If

            ' If no previous selection found, select first template if available
            If cmbTemplate.Items.Count > 0 Then
                cmbTemplate.SelectedIndex = 0
            End If

        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error loading templates: " & ex.Message
        End Try
    End Sub

    Private Sub LoadProjectFolder()
        If Directory.Exists(projectFolder) Then
            treeView1.Nodes.Clear()
            treeView1.BeginUpdate()

            Try
                Dim rootNode As TreeNode = New TreeNode(Path.GetFileName(projectFolder))
                rootNode.Tag = projectFolder
                rootNode.ImageIndex = 0
                treeView1.Nodes.Add(rootNode)
                LoadDirectoryNodes(rootNode, projectFolder)

                toolStripStatusLabel1.Text = "Project folder loaded: " & projectFolder & " (" & CountTotalNodes(rootNode) & " items)"
            Catch ex As Exception
                toolStripStatusLabel1.Text = "Error loading project folder: " & ex.Message
            Finally
                treeView1.EndUpdate()
            End Try
        Else
            treeView1.Nodes.Clear()
            toolStripStatusLabel1.Text = "Project folder not found: " & projectFolder
        End If
    End Sub

    Private Function CountTotalNodes(parentNode As TreeNode) As Integer
        Dim count As Integer = parentNode.Nodes.Count
        For Each childNode As TreeNode In parentNode.Nodes
            count += CountTotalNodes(childNode)
        Next
        Return count
    End Function

    Private Sub LoadDirectoryNodes(parentNode As TreeNode, directoryPath As String)
        Try
            ' Add directories
            Dim directories() As String = Directory.GetDirectories(directoryPath)
            For Each directory As String In directories
                Dim dirNode As TreeNode = New TreeNode(Path.GetFileName(directory))
                dirNode.Tag = directory
                parentNode.Nodes.Add(dirNode)
                LoadDirectoryNodes(dirNode, directory)
            Next

            ' Add files
            Dim files() As String = Directory.GetFiles(directoryPath)
            For Each file As String In files
                Dim fileNode As TreeNode = New TreeNode(Path.GetFileName(file))
                fileNode.Tag = file
                parentNode.Nodes.Add(fileNode)
            Next
        Catch ex As UnauthorizedAccessException
            ' Skip directories we can't access
        End Try
    End Sub

    ' === EXPAND/COLLAPSE FUNCTIONALITY ===
    Private Sub btnExpandAll_Click(sender As Object, e As EventArgs) Handles btnExpandAll.Click
        If treeView1.Nodes.Count = 0 Then
            toolStripStatusLabel1.Text = "No tree loaded to expand"
            Return
        End If

        Try
            treeView1.BeginUpdate()
            ExpandAllNodes(treeView1.Nodes)
            toolStripStatusLabel1.Text = "All tree nodes expanded"
        Finally
            treeView1.EndUpdate()
        End Try
    End Sub

    Private Sub btnCollapseAll_Click(sender As Object, e As EventArgs) Handles btnCollapseAll.Click
        If treeView1.Nodes.Count = 0 Then
            toolStripStatusLabel1.Text = "No tree loaded to collapse"
            Return
        End If

        Try
            treeView1.BeginUpdate()
            CollapseAllNodes(treeView1.Nodes)
            toolStripStatusLabel1.Text = "All tree nodes collapsed"
        Finally
            treeView1.EndUpdate()
        End Try
    End Sub

    Private Sub ExpandAllNodes(nodes As TreeNodeCollection)
        For Each node As TreeNode In nodes
            node.Expand()
            If node.Nodes.Count > 0 Then
                ExpandAllNodes(node.Nodes)
            End If
        Next
    End Sub

    Private Sub CollapseAllNodes(nodes As TreeNodeCollection)
        For Each node As TreeNode In nodes
            node.Collapse()
            If node.Nodes.Count > 0 Then
                CollapseAllNodes(node.Nodes)
            End If
        Next
    End Sub

    Private Sub btnRefreshTree_Click(sender As Object, e As EventArgs) Handles btnRefreshTree.Click
        If String.IsNullOrEmpty(projectFolder) Then
            toolStripStatusLabel1.Text = "Error: Please select a project folder first"
            Return
        End If

        RefreshTreeView()
        toolStripStatusLabel1.Text = "Tree view refreshed successfully"
    End Sub

    Private Sub RefreshTreeView()
        If Not String.IsNullOrEmpty(projectFolder) AndAlso Directory.Exists(projectFolder) Then
            ' Show progress for tree refresh
            ShowProgress()

            Try
                ' Step 1: Store current state (20%)
                UpdateProgress(20, "Storing current tree state...")
                Dim checkedFiles As List(Of String) = GetCheckedFiles()
                Dim treeState As Dictionary(Of String, Boolean) = GetTreeExpansionState()

                ' Step 2: Reload tree (60%)
                UpdateProgress(60, "Reloading project tree...")
                LoadProjectFolder()

                ' Step 3: Restore state (80%)
                UpdateProgress(80, "Restoring file selections...")

                If checkedFiles.Count > 0 OrElse treeState.Count > 0 Then
                    isUpdatingNodes = True
                    Try
                        ' Restore checked files
                        For Each filePath In checkedFiles
                            If File.Exists(filePath) Then
                                SelectFileInTree(filePath)
                            End If
                        Next

                        ' Restore expansion state
                        If treeState.Count > 0 Then
                            RestoreTreeExpansionState(treeState)
                        End If
                    Finally
                        isUpdatingNodes = False
                    End Try
                    UpdateTokenCount()
                End If

                ' Step 4: Complete (100%)
                UpdateProgress(100, "Tree refresh complete!")
                System.Threading.Thread.Sleep(300)

            Finally
                HideProgress()
            End Try
        End If
    End Sub

    ' === FILE MENU EVENTS ===
    Private Sub selectProjectFolderToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles selectProjectFolderToolStripMenuItem.Click
        folderBrowserDialog1.Description = "Select Project Folder"
        folderBrowserDialog1.ShowNewFolderButton = True

        If Not String.IsNullOrEmpty(projectFolder) AndAlso Directory.Exists(projectFolder) Then
            folderBrowserDialog1.SelectedPath = projectFolder
        End If

        If folderBrowserDialog1.ShowDialog = DialogResult.OK Then
            projectFolder = folderBrowserDialog1.SelectedPath
            LoadProjectFolder()
            SaveConfiguration()
            RefreshTreeView()
        End If
    End Sub

    ' === BACKUP FUNCTIONALITY - FIXED VERSION ===
    Private Sub backupProjectToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles backupProjectToolStripMenuItem.Click
        If String.IsNullOrEmpty(projectFolder) Then
            MessageBox.Show("Please select a project folder first.", "Project Folder Required", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Return
        End If

        If Not Directory.Exists(projectFolder) Then
            MessageBox.Show("Project folder does not exist: " & projectFolder, "Folder Not Found", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Return
        End If

        If String.IsNullOrEmpty(outputFolder) Then
            MessageBox.Show("Please set an output folder first in Settings.", "Output Folder Required", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Return
        End If

        Try
            ' Ensure output folder exists
            If Not Directory.Exists(outputFolder) Then
                Directory.CreateDirectory(outputFolder)
            End If

            ' Generate backup filename
            Dim projectName As String = If(String.IsNullOrWhiteSpace(txtProjectTitle.Text), Path.GetFileName(projectFolder), txtProjectTitle.Text.Trim())
            ' Clean project name for filename
            For Each invalidChar In Path.GetInvalidFileNameChars()
                projectName = projectName.Replace(invalidChar, "_")
            Next

            Dim timestamp As String = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss")
            Dim zipFileName As String = $"{projectName}_{timestamp}.zip"
            Dim zipFilePath As String = Path.Combine(outputFolder, zipFileName)

            ' Show progress
            ShowProgress()
            btnCombine.Enabled = False

            Try
                ' Create backup with progress
                CreateProjectBackup(projectFolder, zipFilePath)

                ' Verify backup was created successfully
                If File.Exists(zipFilePath) Then
                    Dim fileInfo As New FileInfo(zipFilePath)
                    If fileInfo.Length > 0 Then
                        toolStripStatusLabel1.Text = $"Project backed up successfully: {zipFileName} ({FormatFileSize(fileInfo.Length)})"

                        ' Ask if user wants to open output folder
                        Dim result As DialogResult = MessageBox.Show($"Backup created successfully:{vbCrLf}{zipFilePath}{vbCrLf}Size: {FormatFileSize(fileInfo.Length)}{vbCrLf}{vbCrLf}Would you like to open the output folder?",
                                                                   "Backup Complete", MessageBoxButtons.YesNo, MessageBoxIcon.Information)
                        If result = DialogResult.Yes Then
                            goToOutputToolStripMenuItem_Click(sender, e)
                        End If
                    Else
                        MessageBox.Show("Backup file was created but is empty. No files were found to backup.", "Backup Empty", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                    End If
                Else
                    MessageBox.Show("Backup file was not created.", "Backup Failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
                End If

            Finally
                HideProgress()
                btnCombine.Enabled = True
            End Try

        Catch ex As Exception
            MessageBox.Show($"Error creating backup: {ex.Message}", "Backup Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            toolStripStatusLabel1.Text = "Backup failed: " & ex.Message
        End Try
    End Sub

    ' Main backup creation method
    Private Sub CreateProjectBackup(sourceFolder As String, zipFilePath As String)
        UpdateProgress(5, "Initializing backup process...")

        ' Delete existing zip file if it exists
        If File.Exists(zipFilePath) Then
            File.Delete(zipFilePath)
        End If

        UpdateProgress(10, "Scanning project files...")

        ' Get all files to backup using simple method
        Dim filesToBackup As New List(Of String)

        Try
            ' Simple scan - get all files and then filter
            Dim allFiles() As String = Directory.GetFiles(sourceFolder, "*.*", SearchOption.AllDirectories)

            For Each filePath In allFiles
                If ShouldIncludeFileInBackup(filePath, sourceFolder) Then
                    filesToBackup.Add(filePath)
                End If
            Next

        Catch ex As Exception
            Throw New Exception($"Error scanning project folder: {ex.Message}")
        End Try

        UpdateProgress(20, $"Found {filesToBackup.Count} files to backup...")

        If filesToBackup.Count = 0 Then
            ' Try to get a file count for debugging
            Dim totalFiles As Integer = 0
            Try
                totalFiles = Directory.GetFiles(sourceFolder, "*.*", SearchOption.AllDirectories).Length
            Catch
            End Try

            Throw New Exception($"No files found to backup.{vbCrLf}{vbCrLf}" &
                              $"Project folder: {sourceFolder}{vbCrLf}" &
                              $"Total files in folder: {totalFiles}{vbCrLf}" &
                              $"Excluded folders: {String.Join(", ", excludedFolders)}{vbCrLf}{vbCrLf}" &
                              $"Try adjusting excluded folders in Settings.")
        End If

        ' Create zip file
        Using archive As ZipArchive = ZipFile.Open(zipFilePath, ZipArchiveMode.Create)
            Dim totalFiles As Integer = filesToBackup.Count

            For i As Integer = 0 To totalFiles - 1
                Dim filePath As String = filesToBackup(i)
                Dim fileName As String = Path.GetFileName(filePath)
                Dim progress As Integer = 20 + CInt((i + 1) * 70 / totalFiles)

                UpdateProgress(progress, $"Backing up {i + 1}/{totalFiles}: {fileName}")

                Try
                    ' Calculate relative path
                    Dim relativePath As String = GetBackupRelativePath(filePath, sourceFolder)

                    If String.IsNullOrEmpty(relativePath) Then
                        Continue For
                    End If

                    ' Normalize path separators for zip file
                    relativePath = relativePath.Replace("\", "/")

                    ' Create zip entry
                    Dim entry As ZipArchiveEntry = archive.CreateEntry(relativePath, CompressionLevel.Optimal)
                    entry.LastWriteTime = File.GetLastWriteTime(filePath)

                    ' Copy file content
                    Using entryStream As Stream = entry.Open()
                        Using fileStream As FileStream = File.OpenRead(filePath)
                            fileStream.CopyTo(entryStream)
                        End Using
                    End Using

                Catch ex As Exception
                    ' Skip files that can't be read
                    Continue For
                End Try

                ' Update UI periodically
                If i Mod 10 = 0 Then
                    Application.DoEvents()
                End If
            Next
        End Using

        UpdateProgress(95, "Finalizing backup...")

        ' Verify the backup
        If File.Exists(zipFilePath) Then
            Dim fileInfo As New FileInfo(zipFilePath)
            If fileInfo.Length = 0 Then
                Throw New Exception("Backup file was created but is empty")
            End If
            UpdateProgress(100, $"Backup completed: {FormatFileSize(fileInfo.Length)}")
        Else
            Throw New Exception("Backup file was not created")
        End If
    End Sub

    ' Check if a file should be included in backup
    Private Function ShouldIncludeFileInBackup(filePath As String, rootPath As String) As Boolean
        Try
            ' Get file info
            Dim fileInfo As New FileInfo(filePath)

            ' Skip hidden and system files
            If fileInfo.Attributes.HasFlag(FileAttributes.Hidden) OrElse fileInfo.Attributes.HasFlag(FileAttributes.System) Then
                Return False
            End If

            ' Check if file is in an excluded folder
            Dim relativePath As String = GetBackupRelativePath(filePath, rootPath)
            Dim pathParts() As String = relativePath.Split("\"c, "/"c)

            ' Check each part of the path against excluded folders
            For Each part In pathParts
                If excludedFolders.Any(Function(excluded) String.Equals(excluded, part, StringComparison.OrdinalIgnoreCase)) Then
                    Return False
                End If
            Next

            Return True

        Catch
            Return False
        End Try
    End Function

    ' Get relative path for backup
    Private Function GetBackupRelativePath(fullPath As String, basePath As String) As String
        Try
            ' Normalize paths to use consistent separators
            Dim normalizedBase As String = Path.GetFullPath(basePath).TrimEnd(Path.DirectorySeparatorChar)
            Dim normalizedFull As String = Path.GetFullPath(fullPath)

            ' Check if the file is actually under the base path
            If normalizedFull.StartsWith(normalizedBase & Path.DirectorySeparatorChar, StringComparison.OrdinalIgnoreCase) Then
                ' Calculate relative path by removing the base path
                Dim relativePath As String = normalizedFull.Substring(normalizedBase.Length + 1)
                Return relativePath
            Else
                ' File is not under base path, return just filename
                Return Path.GetFileName(fullPath)
            End If

        Catch ex As Exception
            ' Fallback to filename only
            Return Path.GetFileName(fullPath)
        End Try
    End Function


    ' Debug method to test backup scanning
    Private Sub TestBackupScanning()
        If String.IsNullOrEmpty(projectFolder) OrElse Not Directory.Exists(projectFolder) Then
            MessageBox.Show("Please select a valid project folder first.", "Test Error", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Return
        End If

        Try
            ' Show current settings
            Dim excludedList As String = String.Join(", ", excludedFolders)

            ' Count total files
            Dim allFiles() As String = Directory.GetFiles(projectFolder, "*.*", SearchOption.AllDirectories)

            ' Count files that would be included
            Dim filesToBackup As New List(Of String)
            For Each filePath In allFiles
                If ShouldIncludeFileInBackup(filePath, projectFolder) Then
                    filesToBackup.Add(filePath)
                End If
            Next

            ' Show results
            Dim message As String = $"Backup Scan Test Results:{vbCrLf}{vbCrLf}" &
                                   $"Project folder: {projectFolder}{vbCrLf}" &
                                   $"Excluded folders: {excludedList}{vbCrLf}{vbCrLf}" &
                                   $"Total files in project: {allFiles.Length}{vbCrLf}" &
                                   $"Files that would be backed up: {filesToBackup.Count}{vbCrLf}{vbCrLf}"

            If filesToBackup.Count > 0 Then
                message += "Sample files to backup:"
                For i As Integer = 0 To Math.Min(9, filesToBackup.Count - 1)
                    message += $"{vbCrLf}  {Path.GetFileName(filesToBackup(i))}"
                Next
                If filesToBackup.Count > 10 Then
                    message += $"{vbCrLf}  ... and {filesToBackup.Count - 10} more files"
                End If
            Else
                message += "❌ NO FILES WOULD BE BACKED UP!{vbCrLf}{vbCrLf}Check your excluded folders in Settings."
            End If

            MessageBox.Show(message, "Backup Test Results", MessageBoxButtons.OK,
                          If(filesToBackup.Count > 0, MessageBoxIcon.Information, MessageBoxIcon.Warning))

        Catch ex As Exception
            MessageBox.Show($"Error during backup test: {ex.Message}", "Test Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Sub goToOutputToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles goToOutputToolStripMenuItem.Click
        If String.IsNullOrEmpty(outputFolder) Then
            MessageBox.Show("Please set an output folder first in Settings.", "Output Folder Not Set", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Return
        End If

        Try
            ' Ensure output folder exists
            If Not Directory.Exists(outputFolder) Then
                Directory.CreateDirectory(outputFolder)
                toolStripStatusLabel1.Text = "Created output folder: " & outputFolder
            End If

            ' Open the output folder in Windows Explorer
            Process.Start("explorer.exe", outputFolder)
            toolStripStatusLabel1.Text = "Opened output folder: " & outputFolder

        Catch ex As Exception
            MessageBox.Show($"Error opening output folder: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            toolStripStatusLabel1.Text = "Error opening output folder: " & ex.Message
        End Try
    End Sub

    Private Sub makeShortcutToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles makeShortcutToolStripMenuItem.Click
        Try
            If String.IsNullOrEmpty(projectFolder) Then
                MessageBox.Show("Please select a project folder first.", "Project Folder Required", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                Return
            End If

            Dim exePath As String = Application.ExecutablePath
            Dim shortcutPath As String = Path.Combine(projectFolder, "RepoBundle.lnk")

            ' Create shortcut using Windows Script Host
            Dim shell As Object = CreateObject("WScript.Shell")
            Dim shortcut As Object = shell.CreateShortcut(shortcutPath)
            shortcut.TargetPath = exePath
            shortcut.WorkingDirectory = Path.GetDirectoryName(exePath)
            shortcut.Description = "RepoBundle - Project File Combiner"
            shortcut.Save()

            toolStripStatusLabel1.Text = "Shortcut created: " & shortcutPath
            MessageBox.Show($"Shortcut created successfully:{vbCrLf}{shortcutPath}", "Shortcut Created", MessageBoxButtons.OK, MessageBoxIcon.Information)

        Catch ex As Exception
            MessageBox.Show($"Error creating shortcut: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            toolStripStatusLabel1.Text = "Error creating shortcut: " & ex.Message
        End Try
    End Sub

    Private Sub exitToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles exitToolStripMenuItem.Click
        Application.Exit()
    End Sub

    ' === CONTEXT MENU EVENTS ===
    Private Sub selectFileToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles selectFileToolStripMenuItem.Click
        If openFileDialog1.ShowDialog() = DialogResult.OK Then
            Dim selectedCount As Integer = 0
            For Each fileName In openFileDialog1.FileNames
                SelectFileInTree(fileName)
                selectedCount += 1
            Next
            toolStripStatusLabel1.Text = $"Selected {selectedCount} files from dialog"
        End If
    End Sub

    Private Sub selectFolderToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles selectFolderToolStripMenuItem.Click
        If folderBrowserDialog1.ShowDialog() = DialogResult.OK Then
            SelectFolderInTree(folderBrowserDialog1.SelectedPath)
            toolStripStatusLabel1.Text = "Selected folder: " & Path.GetFileName(folderBrowserDialog1.SelectedPath)
        End If
    End Sub

    ' === TREE VIEW EVENTS ===
    Private Sub treeView1_AfterCheck(sender As Object, e As TreeViewEventArgs) Handles treeView1.AfterCheck
        If isUpdatingNodes Then Return

        isUpdatingNodes = True
        Try
            ' When a folder is checked, check all children
            If e.Node.Nodes.Count > 0 Then
                CheckAllChildNodes(e.Node, e.Node.Checked)
            End If

            ' Update parent nodes based on children
            UpdateParentNodeCheck(e.Node)

            ' Update token count
            UpdateTokenCount()
        Finally
            isUpdatingNodes = False
        End Try
    End Sub

    Private Sub CheckAllChildNodes(parentNode As TreeNode, isChecked As Boolean)
        ' Don't trigger events while updating
        For Each childNode As TreeNode In parentNode.Nodes
            childNode.Checked = isChecked
            If childNode.Nodes.Count > 0 Then
                CheckAllChildNodes(childNode, isChecked)
            End If
        Next
    End Sub

    Private Sub UpdateParentNodeCheck(node As TreeNode)
        If node.Parent IsNot Nothing Then
            Dim checkedCount As Integer = 0
            Dim totalCount As Integer = node.Parent.Nodes.Count

            For Each sibling As TreeNode In node.Parent.Nodes
                If sibling.Checked Then checkedCount += 1
            Next

            ' Set parent as checked if any children are checked
            node.Parent.Checked = checkedCount > 0

            ' Recursively update grandparent
            UpdateParentNodeCheck(node.Parent)
        End If
    End Sub

    Private Sub SelectFileInTree(filePath As String)
        If String.IsNullOrEmpty(filePath) Then Return

        isUpdatingNodes = True
        Try
            Dim node As TreeNode = FindNodeByPath(treeView1.Nodes, filePath)
            If node IsNot Nothing Then
                node.Checked = True
                EnsureNodeVisible(node)
                UpdateParentNodeCheck(node)
            Else
                ' If node not found, try to refresh tree and find again
                If Not String.IsNullOrEmpty(projectFolder) AndAlso filePath.StartsWith(projectFolder, StringComparison.OrdinalIgnoreCase) Then
                    RefreshAndSelectFile(filePath)
                End If
            End If
        Finally
            isUpdatingNodes = False
        End Try
    End Sub

    Private Sub RefreshAndSelectFile(filePath As String)
        ' This method refreshes the tree and then tries to select the file
        If File.Exists(filePath) OrElse Directory.Exists(filePath) Then
            ' Store current selections
            Dim currentSelections As List(Of String) = GetCheckedFiles()

            ' Reload tree structure
            LoadProjectFolder()

            ' Restore all previous selections plus the new one
            isUpdatingNodes = True
            Try
                For Each selectedFile In currentSelections
                    Dim node As TreeNode = FindNodeByPath(treeView1.Nodes, selectedFile)
                    If node IsNot Nothing Then
                        node.Checked = True
                    End If
                Next

                ' Now try to select the target file again
                Dim targetNode As TreeNode = FindNodeByPath(treeView1.Nodes, filePath)
                If targetNode IsNot Nothing Then
                    targetNode.Checked = True
                    EnsureNodeVisible(targetNode)
                End If
            Finally
                isUpdatingNodes = False
            End Try
        End If
    End Sub

    Private Sub EnsureNodeVisible(node As TreeNode)
        ' Only expand parent nodes if they are already expanded or if the node is directly checked
        If Not isLoadingTemplate Then
            Dim parentNode As TreeNode = node.Parent
            While parentNode IsNot Nothing
                If parentNode.IsExpanded Then
                    parentNode.Expand()
                End If
                parentNode = parentNode.Parent
            End While
        End If

        Try
            node.EnsureVisible()
        Catch
            ' Ignore if node can't be made visible
        End Try
    End Sub

    Private Sub SelectFolderInTree(folderPath As String)
        isUpdatingNodes = True
        Try
            Dim node As TreeNode = FindNodeByPath(treeView1.Nodes, folderPath)
            If node IsNot Nothing Then
                CheckAllChildNodes(node, True)
                node.Checked = True
            End If
        Finally
            isUpdatingNodes = False
        End Try
    End Sub

    Private Function FindNodeByPath(nodes As TreeNodeCollection, path As String) As TreeNode
        For Each node As TreeNode In nodes
            If node.Tag IsNot Nothing Then
                Dim nodePath As String = node.Tag.ToString()
                ' Use case-insensitive comparison for Windows file paths
                If String.Equals(nodePath, path, StringComparison.OrdinalIgnoreCase) Then
                    Return node
                End If
            End If

            ' Recursively search child nodes
            Dim childNode As TreeNode = FindNodeByPath(node.Nodes, path)
            If childNode IsNot Nothing Then
                Return childNode
            End If
        Next
        Return Nothing
    End Function

    Private Sub UpdateTokenCount()
        Dim checkedFiles As List(Of String) = GetCheckedFiles()

        If String.IsNullOrEmpty(projectFolder) OrElse String.IsNullOrEmpty(outputFolder) Then
            lblTokenCount.Text = "Token Count: 0"
            Return
        End If

        If cmbProjectType.SelectedItem Is Nothing Then
            lblTokenCount.Text = "Token Count: 0"
            Return
        End If

        Try
            Dim combiner As New FileCombiner(projectFolder, outputFolder)
            Dim tokenCount As Integer = combiner.EstimateTokenCount(checkedFiles, cmbProjectType.SelectedItem.ToString())
            lblTokenCount.Text = "Token Count: " & tokenCount.ToString("N0")
        Catch ex As Exception
            lblTokenCount.Text = "Token Count: Error"
        End Try
    End Sub

    ' === TEMPLATE MANAGEMENT ===
    Private Sub btnSaveTemplate_Click(sender As Object, e As EventArgs) Handles btnSaveTemplate.Click
        If String.IsNullOrWhiteSpace(txtTemplateName.Text) Then
            toolStripStatusLabel1.Text = "Error: Please enter a template name"
            Return
        End If

        Dim checkedFiles As List(Of String) = GetCheckedFiles()
        If checkedFiles.Count = 0 Then
            toolStripStatusLabel1.Text = "Error: Please select at least one file before saving template"
            Return
        End If

        Try
            SaveCurrentTemplate(txtTemplateName.Text.Trim())
            LoadTemplates()

            ' Select the newly saved template
            For i As Integer = 0 To cmbTemplate.Items.Count - 1
                If cmbTemplate.Items(i).ToString().Equals(txtTemplateName.Text.Trim(), StringComparison.OrdinalIgnoreCase) Then
                    cmbTemplate.SelectedIndex = i
                    Exit For
                End If
            Next

            txtTemplateName.Clear()
            toolStripStatusLabel1.Text = "Template saved successfully with " & checkedFiles.Count & " files"
        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error saving template: " & ex.Message
        End Try
    End Sub

    Private Sub btnUpdateTemplate_Click(sender As Object, e As EventArgs) Handles btnUpdateTemplate.Click
        If cmbTemplate.SelectedItem Is Nothing Then
            toolStripStatusLabel1.Text = "Error: Please select a template to update"
            Return
        End If

        Dim checkedFiles As List(Of String) = GetCheckedFiles()
        If checkedFiles.Count = 0 Then
            toolStripStatusLabel1.Text = "Error: Please select at least one file before updating template"
            Return
        End If

        ' Show progress and disable controls
        ShowProgress()
        btnUpdateTemplate.Enabled = False
        btnUpdateTemplate.Text = "Updating..."

        Try
            Dim templateName As String = cmbTemplate.SelectedItem.ToString()

            ' Step 1: Initialize (10%)
            UpdateProgress(10, "Initializing template update...")

            ' Step 2: Store tree expansion state (20%)
            UpdateProgress(20, "Storing tree expansion state...")
            Dim treeState As Dictionary(Of String, Boolean) = GetTreeExpansionState()

            ' Step 3: Delete old template (40%)
            UpdateProgress(40, "Removing old template version...")
            DeleteTemplate(templateName)

            ' Step 4: Save new template (60%)
            UpdateProgress(60, "Saving updated template...")
            SaveCurrentTemplate(templateName)

            ' Step 5: Refresh template list (80%)
            UpdateProgress(80, "Refreshing template list...")
            LoadTemplates()

            ' Step 6: Restore tree state (90%)
            UpdateProgress(90, "Restoring tree expansion state...")
            RestoreTreeExpansionState(treeState)

            ' Step 7: Complete (100%)
            UpdateProgress(100, "Template update complete!")
            System.Threading.Thread.Sleep(500)

            toolStripStatusLabel1.Text = "Template '" & templateName & "' updated with " & checkedFiles.Count & " files"

        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error updating template: " & ex.Message
        Finally
            ' Hide progress and restore controls
            HideProgress()
            btnUpdateTemplate.Enabled = True
            btnUpdateTemplate.Text = "Update"
        End Try
    End Sub

    Private Sub btnCopyTemplate_Click(sender As Object, e As EventArgs) Handles btnCopyTemplate.Click
        If cmbTemplate.SelectedItem Is Nothing Then
            toolStripStatusLabel1.Text = "Error: Please select a template to copy"
            Return
        End If

        Try
            Dim selectedTemplate As String = cmbTemplate.SelectedItem.ToString()
            txtTemplateName.Text = selectedTemplate & "_Copy"
            txtTemplateName.SelectAll()
            txtTemplateName.Focus()
            toolStripStatusLabel1.Text = "Template copied - enter new name and click Save to create copy"
        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error copying template: " & ex.Message
        End Try
    End Sub

    Private Sub btnLoadTemplate_Click(sender As Object, e As EventArgs) Handles btnLoadTemplate.Click
        If cmbTemplate.SelectedItem Is Nothing Then
            toolStripStatusLabel1.Text = "Error: Please select a template to load"
            Return
        End If

        If String.IsNullOrEmpty(projectFolder) Then
            toolStripStatusLabel1.Text = "Error: Please select a project folder first"
            Return
        End If

        ' Show progress and disable controls
        ShowProgress()
        btnLoadTemplate.Enabled = False
        btnLoadTemplate.Text = "Loading..."

        Try
            ' Step 1: Initialize (10%)
            UpdateProgress(10, "Initializing template loading...")

            EnsureTreeLoaded()
            Dim selectedTemplate = cmbTemplate.SelectedItem.ToString

            ' Step 2: Clear current selections (30%)
            UpdateProgress(30, "Clearing current selections...")
            ClearAllChecks(treeView1.Nodes)

            ' Step 3: Read template (50%)
            UpdateProgress(50, "Reading template: " & selectedTemplate)

            Dim sectionName As String = "Template_" & selectedTemplate.Replace(" ", "_")
            Dim keys As List(Of String) = templateIni.GetKeys(sectionName)
            Dim filesToLoad As New List(Of String)

            ' Collect files from template
            For Each key In keys
                If key.StartsWith("File") Then
                    Dim filePath As String = templateIni.ReadValue(sectionName, key, "")
                    If Not String.IsNullOrEmpty(filePath) Then
                        filesToLoad.Add(filePath)
                    End If
                End If
            Next

            ' Step 4: Load files with progress (50% - 90%)
            UpdateProgress(60, $"Loading {filesToLoad.Count} files...")

            Dim filesLoaded As Integer = 0
            Dim progressStep As Integer = 30 \ Math.Max(filesToLoad.Count, 1)

            For i As Integer = 0 To filesToLoad.Count - 1
                Dim filePath As String = filesToLoad(i)
                Dim currentProgress As Integer = 60 + (i * progressStep)
                UpdateProgress(currentProgress, $"Loading file {i + 1}/{filesToLoad.Count}: {Path.GetFileName(filePath)}")

                If File.Exists(filePath) OrElse Directory.Exists(filePath) Then
                    If filePath.StartsWith(projectFolder, StringComparison.OrdinalIgnoreCase) Then
                        SelectFileInTree(filePath)
                        filesLoaded += 1
                    End If
                End If

                If i Mod 3 = 0 Then ' Update every 3rd file to avoid too many updates
                    System.Threading.Thread.Sleep(50)
                End If
            Next

            ' Step 5: Finalize (100%)
            UpdateProgress(95, "Finalizing template load...")
            UpdateTokenCount()
            UpdateProgress(100, "Template loaded successfully!")
            System.Threading.Thread.Sleep(500)

            toolStripStatusLabel1.Text = "Template '" & selectedTemplate & "' loaded - " & filesLoaded & " files selected"

        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error loading template: " & ex.Message
        Finally
            ' Hide progress and restore controls
            HideProgress()
            btnLoadTemplate.Enabled = True
            btnLoadTemplate.Text = "Load"
        End Try
    End Sub

    Private Sub SaveCurrentTemplate(templateName As String)
        Dim checkedFiles As List(Of String) = GetCheckedFiles()
        Dim sectionName As String = "Template_" & templateName.Replace(" ", "_")

        ' Clear existing template data
        Dim keys As List(Of String) = templateIni.GetKeys(sectionName)
        For Each key In keys
            templateIni.DeleteKey(sectionName, key)
        Next

        ' Save template data
        templateIni.WriteValue(sectionName, "Name", templateName)
        For i As Integer = 0 To checkedFiles.Count - 1
            templateIni.WriteValue(sectionName, "File" & (i + 1).ToString(), checkedFiles(i))
        Next
    End Sub

    Private Sub LoadTemplate(templateName As String)
        If String.IsNullOrEmpty(projectFolder) OrElse Not Directory.Exists(projectFolder) Then
            Return
        End If

        EnsureTreeLoaded()

        Try
            ClearAllChecks(treeView1.Nodes)

            Dim sectionName As String = "Template_" & templateName.Replace(" ", "_")
            Dim keys As List(Of String) = templateIni.GetKeys(sectionName)
            Dim filesLoaded As Integer = 0
            Dim filesNotFound As Integer = 0

            For Each key In keys
                If key.StartsWith("File") Then
                    Dim filePath As String = templateIni.ReadValue(sectionName, key, "")
                    If Not String.IsNullOrEmpty(filePath) Then
                        If File.Exists(filePath) OrElse Directory.Exists(filePath) Then
                            If filePath.StartsWith(projectFolder, StringComparison.OrdinalIgnoreCase) Then
                                SelectFileInTree(filePath)
                                Dim node As TreeNode = FindNodeByPath(treeView1.Nodes, filePath)
                                If node IsNot Nothing AndAlso node.Checked Then
                                    filesLoaded += 1
                                Else
                                    filesNotFound += 1
                                End If
                            Else
                                filesNotFound += 1
                            End If
                        Else
                            filesNotFound += 1
                        End If
                    End If
                End If
            Next

            UpdateTokenCount()

        Catch ex As Exception
            toolStripStatusLabel1.Text = $"Error loading template '{templateName}': {ex.Message}"
        End Try
    End Sub

    Private Sub EnsureTreeLoaded()
        If Not String.IsNullOrEmpty(projectFolder) AndAlso Directory.Exists(projectFolder) Then
            If treeView1.Nodes.Count = 0 Then
                LoadProjectFolder()
            Else
                ' Check if the root node matches current project folder
                If treeView1.Nodes.Count > 0 AndAlso treeView1.Nodes(0).Tag IsNot Nothing Then
                    Dim rootPath As String = treeView1.Nodes(0).Tag.ToString()
                    If Not String.Equals(rootPath, projectFolder, StringComparison.OrdinalIgnoreCase) Then
                        LoadProjectFolder()
                    End If
                Else
                    LoadProjectFolder()
                End If
            End If
        End If
    End Sub

    Private Sub ClearAllChecks(nodes As TreeNodeCollection)
        isUpdatingNodes = True
        Try
            For Each node As TreeNode In nodes
                node.Checked = False
                ClearAllChecks(node.Nodes)
            Next
        Finally
            isUpdatingNodes = False
        End Try
    End Sub

    Private Function GetCheckedFiles() As List(Of String)
        Dim checkedFiles As New List(Of String)
        CollectCheckedFiles(treeView1.Nodes, checkedFiles)
        Return checkedFiles
    End Function

    Private Sub CollectCheckedFiles(nodes As TreeNodeCollection, checkedFiles As List(Of String))
        For Each node As TreeNode In nodes
            If node.Checked AndAlso node.Tag IsNot Nothing Then
                Dim path As String = node.Tag.ToString()
                If File.Exists(path) Then
                    checkedFiles.Add(path)
                End If
            End If
            CollectCheckedFiles(node.Nodes, checkedFiles)
        Next
    End Sub

    Private Sub cmbTemplate_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbTemplate.SelectedIndexChanged
        If isLoadingTemplate Then Return

        btnLoadTemplate.Enabled = (cmbTemplate.SelectedItem IsNot Nothing)
        btnCopyTemplate.Enabled = (cmbTemplate.SelectedItem IsNot Nothing)
        btnUpdateTemplate.Enabled = (cmbTemplate.SelectedItem IsNot Nothing)

        If cmbTemplate.SelectedItem IsNot Nothing Then
            toolStripStatusLabel1.Text = "Template selected: " & cmbTemplate.SelectedItem.ToString()
            AutoLoadTemplate(cmbTemplate.SelectedItem.ToString())
        Else
            toolStripStatusLabel1.Text = "No template selected"
        End If
    End Sub

    Private Sub AutoLoadTemplate(templateName As String)
        If String.IsNullOrEmpty(projectFolder) OrElse Not Directory.Exists(projectFolder) Then
            Return
        End If

        EnsureTreeLoaded()

        Try
            isLoadingTemplate = True
            LoadTemplate(templateName)
            Dim loadedFiles As List(Of String) = GetCheckedFiles()
            toolStripStatusLabel1.Text = "Template '" & templateName & "' auto-loaded - " & loadedFiles.Count & " files selected"
        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error auto-loading template: " & ex.Message
        Finally
            isLoadingTemplate = False
        End Try
    End Sub

    ' === TREE STATE MANAGEMENT ===
    Private Function GetTreeExpansionState() As Dictionary(Of String, Boolean)
        Dim state As New Dictionary(Of String, Boolean)
        CollectTreeExpansionState(treeView1.Nodes, state)
        Return state
    End Function

    Private Sub CollectTreeExpansionState(nodes As TreeNodeCollection, state As Dictionary(Of String, Boolean))
        For Each node As TreeNode In nodes
            If node.Tag IsNot Nothing Then
                Dim path As String = node.Tag.ToString()
                state(path) = node.IsExpanded
                If node.Nodes.Count > 0 Then
                    CollectTreeExpansionState(node.Nodes, state)
                End If
            End If
        Next
    End Sub

    Private Sub RestoreTreeExpansionState(state As Dictionary(Of String, Boolean))
        RestoreNodeExpansionState(treeView1.Nodes, state)
    End Sub

    Private Sub RestoreNodeExpansionState(nodes As TreeNodeCollection, state As Dictionary(Of String, Boolean))
        For Each node As TreeNode In nodes
            If node.Tag IsNot Nothing Then
                Dim path As String = node.Tag.ToString()
                If state.ContainsKey(path) Then
                    If state(path) Then
                        node.Expand()
                    Else
                        node.Collapse()
                    End If
                End If
                If node.Nodes.Count > 0 Then
                    RestoreNodeExpansionState(node.Nodes, state)
                End If
            End If
        Next
    End Sub

    Private Sub DeleteTemplate(templateName As String)
        Try
            Dim sectionName As String = "Template_" & templateName.Replace(" ", "_")
            If templateIni.SectionExists(sectionName) Then
                templateIni.DeleteSection(sectionName)
            End If
        Catch ex As Exception
            Throw New Exception("Error deleting template: " & ex.Message)
        End Try
    End Sub

    ' === COMBINE FILES WITH ENHANCED PROGRESS ===
    Private Sub btnCombine_Click(sender As Object, e As EventArgs) Handles btnCombine.Click
        If String.IsNullOrWhiteSpace(projectFolder) Then
            toolStripStatusLabel1.Text = "Error: Please select a project folder first"
            Return
        End If

        If String.IsNullOrWhiteSpace(outputFolder) Then
            toolStripStatusLabel1.Text = "Error: Please set output folder in Settings"
            Return
        End If

        If cmbProjectType.SelectedItem Is Nothing Then
            toolStripStatusLabel1.Text = "Error: Please select a project type"
            Return
        End If

        Dim checkedFiles As List(Of String) = GetCheckedFiles()
        If checkedFiles.Count = 0 Then
            toolStripStatusLabel1.Text = "Error: Please select at least one file to combine"
            Return
        End If

        Try
            If Not Directory.Exists(outputFolder) Then
                Directory.CreateDirectory(outputFolder)
            End If

            ' Test write permissions
            Dim testFile As String = Path.Combine(outputFolder, "test_write_permission.tmp")
            File.WriteAllText(testFile, "test")
            File.Delete(testFile)

        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error: Cannot write to output folder - " & ex.Message
            Return
        End Try

        ' Show progress and disable controls
        ShowProgress()
        btnCombine.Enabled = False
        btnCombine.Text = "Combining..."
        Me.UseWaitCursor = True

        Try
            ' Step 1: Initialize (5%)
            UpdateProgress(5, "Initializing file combination...")

            ' Step 2: Analyze files (15%)
            UpdateProgress(15, "Analyzing selected files...")

            ' Find SQL files in the selected files
            Dim selectedSqlFiles As New List(Of String)
            For Each filePath In checkedFiles
                If File.Exists(filePath) AndAlso Path.GetExtension(filePath).ToLower() = ".sql" Then
                    selectedSqlFiles.Add(filePath)
                End If
            Next

            ' Combine configured SQL files with selected SQL files
            Dim allSqlFiles As New List(Of String)(databaseFiles)
            For Each sqlFile In selectedSqlFiles
                If Not allSqlFiles.Contains(sqlFile) Then
                    allSqlFiles.Add(sqlFile)
                End If
            Next

            ' Step 3: Preparation (25%)
            UpdateProgress(25, "Preparing file list and combiner...")

            Dim combiner As New FileCombiner(projectFolder, outputFolder)

            ' Step 4: Process files with detailed progress (25% - 85%)
            Dim result As CombineResult = CombineFilesWithEnhancedProgress(combiner, checkedFiles, allSqlFiles)

            ' Step 5: Finalizing (95%)
            UpdateProgress(95, "Finalizing output files...")
            System.Threading.Thread.Sleep(500) ' Brief pause to show completion

            ' Step 6: Complete (100%)
            UpdateProgress(100, "File combination complete!")
            System.Threading.Thread.Sleep(1000) ' Show completion for 1 second

            If result.Success Then
                If allSqlFiles.Count > 0 Then
                    toolStripStatusLabel1.Text = result.Message & $" (Including {allSqlFiles.Count} SQL file(s))"
                Else
                    toolStripStatusLabel1.Text = result.Message
                End If
            Else
                toolStripStatusLabel1.Text = "Error: " & result.Message
            End If

        Catch ex As Exception
            toolStripStatusLabel1.Text = "Error combining files: " & ex.Message
        Finally
            ' Hide progress and restore controls
            HideProgress()
            btnCombine.Enabled = True
            btnCombine.Text = "🔗 Combine Files"
            Me.UseWaitCursor = False
        End Try
    End Sub

    Private Function CombineFilesWithEnhancedProgress(combiner As FileCombiner, checkedFiles As List(Of String), allSqlFiles As List(Of String)) As CombineResult
        ' Filter files that will actually be processed
        Dim filesToProcess As New List(Of String)
        For Each filePath In checkedFiles
            If File.Exists(filePath) Then
                filesToProcess.Add(filePath)
            End If
        Next

        UpdateProgress(30, $"Found {filesToProcess.Count} files to process...")
        System.Threading.Thread.Sleep(200)

        ' Create progress steps for file processing (30% to 85% = 55% range)
        Dim progressRange As Integer = 55
        Dim baseProgress As Integer = 30

        ' Show detailed file processing progress
        For i As Integer = 0 To Math.Min(filesToProcess.Count - 1, 9) ' Show progress for first 10 files
            Dim currentProgress As Integer = baseProgress + CInt((i + 1) * progressRange / Math.Max(filesToProcess.Count, 10))
            Dim fileName As String = Path.GetFileName(filesToProcess(i))
            UpdateProgress(currentProgress, $"Processing file {i + 1}/{filesToProcess.Count}: {fileName}")
            System.Threading.Thread.Sleep(100) ' Brief delay to show progress
        Next

        ' If more than 10 files, show bulk processing
        If filesToProcess.Count > 10 Then
            UpdateProgress(70, $"Processing remaining {filesToProcess.Count - 10} files...")
            System.Threading.Thread.Sleep(300)
        End If

        ' Now perform the actual file combination
        UpdateProgress(85, "Combining all files into output format...")
        System.Threading.Thread.Sleep(200)

        Dim result As CombineResult = combiner.CombineFiles(
            checkedFiles,
            cmbProjectType.SelectedItem.ToString(),
            treeView1.Nodes,
            txtProjectTitle.Text.Trim(),
            "",
            "",
            allSqlFiles.Count > 0,
            allSqlFiles
        )

        UpdateProgress(90, "Writing output files...")
        System.Threading.Thread.Sleep(300)

        Return result
    End Function

    Private Sub cmbProjectType_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbProjectType.SelectedIndexChanged
        UpdateTokenCount()
        SaveConfiguration()

        If cmbProjectType.SelectedItem IsNot Nothing Then
            toolStripStatusLabel1.Text = "Project type changed to: " & cmbProjectType.SelectedItem.ToString()
        End If
    End Sub

    ' === SETTINGS - FIXED: Updated to include excluded folders ===
    Private Sub applicationSettingsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles applicationSettingsToolStripMenuItem.Click
        Dim settingsForm As New frmSettings()
        settingsForm.ProjectFolderPath = projectFolder
        settingsForm.OutputFolderPath = outputFolder
        settingsForm.DatabaseFiles = New List(Of String)(databaseFiles)
        settingsForm.IncludeDatabase = includeDatabase
        settingsForm.ExcludedFolders = New List(Of String)(excludedFolders) ' Added excluded folders

        If settingsForm.ShowDialog() = DialogResult.OK Then
            projectFolder = settingsForm.ProjectFolderPath
            outputFolder = settingsForm.OutputFolderPath
            databaseFiles = settingsForm.DatabaseFiles
            includeDatabase = settingsForm.IncludeDatabase
            excludedFolders = settingsForm.ExcludedFolders ' Added excluded folders

            SaveConfiguration()
            LoadProjectFolder()

            toolStripStatusLabel1.Text = $"Settings updated - {databaseFiles.Count} SQL file(s), {excludedFolders.Count} excluded folder(s)"
        End If
    End Sub

    ' === PROGRESS AND STATUS UPDATES ===
    Private Sub UpdateProgress(percentage As Integer, message As String)
        ' Ensure percentage is within bounds
        percentage = Math.Max(0, Math.Min(100, percentage))

        ' Update main progress bar
        progressBar1.Value = percentage
        progressBar1.Visible = True

        ' Update status message
        toolStripStatusLabel1.Text = message

        ' Also update the status strip progress bar
        toolStripProgressBar1.Visible = True
        toolStripProgressBar1.Value = percentage

        ' Force UI update
        Application.DoEvents()
        Me.Refresh()
    End Sub

    Private Sub HideProgress()
        progressBar1.Visible = False
        toolStripProgressBar1.Visible = False
        Application.DoEvents()
    End Sub

    Private Sub ShowProgress()
        progressBar1.Visible = True
        progressBar1.Value = 0
        toolStripProgressBar1.Visible = True
        toolStripProgressBar1.Value = 0
        Application.DoEvents()
    End Sub

    ' === FILE STATUS AND COUNTING ===
    Private Sub UpdateFileStatusDisplay()
        Try
            Dim checkedFiles As List(Of String) = GetCheckedFiles()
            Dim totalSize As Long = 0

            For Each filePath In checkedFiles
                If File.Exists(filePath) Then
                    Try
                        Dim fileInfo As New FileInfo(filePath)
                        totalSize += fileInfo.Length
                    Catch
                        ' Skip files we can't access
                    End Try
                End If
            Next

            Dim sizeText As String = FormatFileSize(totalSize)
            toolStripStatusLabelFiles.Text = $"Files: {checkedFiles.Count} | Size: {sizeText}"

        Catch ex As Exception
            toolStripStatusLabelFiles.Text = "Files: 0 | Size: 0 KB"
        End Try
    End Sub

    Private Function FormatFileSize(bytes As Long) As String
        If bytes < 1024 Then
            Return bytes.ToString() & " bytes"
        ElseIf bytes < 1024 * 1024 Then
            Return Math.Round(bytes / 1024.0, 1).ToString() & " KB"
        ElseIf bytes < 1024 * 1024 * 1024 Then
            Return Math.Round(bytes / (1024.0 * 1024.0), 1).ToString() & " MB"
        Else
            Return Math.Round(bytes / (1024.0 * 1024.0 * 1024.0), 1).ToString() & " GB"
        End If
    End Function

    ' === ADDITIONAL EVENT HANDLERS ===
    Private Sub treeView1_AfterSelect(sender As Object, e As TreeViewEventArgs) Handles treeView1.AfterSelect
        ' Update file status when selection changes
        UpdateFileStatusDisplay()
    End Sub

    Private Sub txtProjectTitle_TextChanged(sender As Object, e As EventArgs) Handles txtProjectTitle.TextChanged
        ' Update window title with project name
        If Not String.IsNullOrWhiteSpace(txtProjectTitle.Text) Then
            Me.Text = $"RepoBundle - {txtProjectTitle.Text.Trim()}"
        Else
            Me.Text = "RepoBundle - Project File Combiner v2.0"
        End If
    End Sub

    ' === HELP AND ABOUT ===
    Private Sub aboutToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles aboutToolStripMenuItem.Click
        Dim aboutMessage As String = $"RepoBundle - Project File Combiner v2.0{vbCrLf}{vbCrLf}" &
                                   $"A powerful tool for combining project files with intelligent filtering.{vbCrLf}{vbCrLf}" &
                                   $"Features:{vbCrLf}" &
                                   $"• Smart project type filtering{vbCrLf}" &
                                   $"• Template management system{vbCrLf}" &
                                   $"• Automatic file splitting (200KB limit){vbCrLf}" &
                                   $"• Token counting and estimation{vbCrLf}" &
                                   $"• INI-based configuration{vbCrLf}" &
                                   $"• Project backup functionality{vbCrLf}" &
                                   $"• Dynamic excluded folders{vbCrLf}" &
                                   $"• Quick output folder access{vbCrLf}{vbCrLf}" &
                                   $"Configuration files:{vbCrLf}" &
                                   $"• config.ini - Application settings{vbCrLf}" &
                                   $"• template.ini - Saved file templates{vbCrLf}{vbCrLf}" &
                                   $"© 2024 RepoBundle Project"

        MessageBox.Show(aboutMessage, "About RepoBundle", MessageBoxButtons.OK, MessageBoxIcon.Information)
    End Sub

    ' === KEYBOARD SHORTCUTS ===
    Private Sub frmMain_KeyDown(sender As Object, e As KeyEventArgs) Handles MyBase.KeyDown
        ' Handle keyboard shortcuts
        Select Case e.KeyCode
            Case Keys.F5
                ' Refresh tree view
                If Not String.IsNullOrEmpty(projectFolder) Then
                    RefreshTreeView()
                    e.Handled = True
                End If
            Case Keys.F1
                ' Show about dialog
                aboutToolStripMenuItem_Click(sender, EventArgs.Empty)
                e.Handled = True
        End Select

        ' Handle Ctrl key combinations
        If e.Control Then
            Select Case e.KeyCode
                Case Keys.O
                    ' Open project folder
                    selectProjectFolderToolStripMenuItem_Click(sender, EventArgs.Empty)
                    e.Handled = True
                Case Keys.B
                    ' Backup project
                    If Not String.IsNullOrEmpty(projectFolder) Then
                        backupProjectToolStripMenuItem_Click(sender, EventArgs.Empty)
                        e.Handled = True
                    End If
                Case Keys.G
                    ' Go to output folder
                    If Not String.IsNullOrEmpty(outputFolder) Then
                        goToOutputToolStripMenuItem_Click(sender, EventArgs.Empty)
                        e.Handled = True
                    End If
                Case Keys.S
                    ' Save template (if template name is entered)
                    If Not String.IsNullOrWhiteSpace(txtTemplateName.Text) Then
                        btnSaveTemplate_Click(sender, EventArgs.Empty)
                        e.Handled = True
                    End If
                Case Keys.L
                    ' Load template (if template is selected)
                    If cmbTemplate.SelectedItem IsNot Nothing Then
                        btnLoadTemplate_Click(sender, EventArgs.Empty)
                        e.Handled = True
                    End If
                Case Keys.Enter
                    ' Combine files
                    btnCombine_Click(sender, EventArgs.Empty)
                    e.Handled = True
            End Select
        End If
    End Sub

    ' === TOOLTIP SETUP ===
    Private Sub SetupTooltips()
        Dim toolTip As New ToolTip()
        toolTip.AutoPopDelay = 5000
        toolTip.InitialDelay = 1000
        toolTip.ReshowDelay = 500
        toolTip.ShowAlways = True

        ' Add tooltips to controls
        toolTip.SetToolTip(btnRefreshTree, "Refresh the file tree (F5)")
        toolTip.SetToolTip(btnExpandAll, "Expand all tree nodes")
        toolTip.SetToolTip(btnCollapseAll, "Collapse all tree nodes")
        toolTip.SetToolTip(btnSaveTemplate, "Save current file selection as template (Ctrl+S)")
        toolTip.SetToolTip(btnLoadTemplate, "Load selected template (Ctrl+L)")
        toolTip.SetToolTip(btnCopyTemplate, "Copy template name for creating a new template")
        toolTip.SetToolTip(btnUpdateTemplate, "Update selected template with current file selection")
        toolTip.SetToolTip(btnCombine, "Combine selected files (Ctrl+Enter)")
        toolTip.SetToolTip(cmbProjectType, "Select project type for file filtering")
        toolTip.SetToolTip(lblTokenCount, "Estimated token count for selected files")
    End Sub

    ' === WINDOW STATE MANAGEMENT ===
    Private Sub SaveWindowState()
        Try
            iniHelper.WriteValue("Window", "WindowState", Me.WindowState.ToString())
            If Me.WindowState = FormWindowState.Normal Then
                iniHelper.WriteValue("Window", "Width", Me.Width.ToString())
                iniHelper.WriteValue("Window", "Height", Me.Height.ToString())
                iniHelper.WriteValue("Window", "Left", Me.Left.ToString())
                iniHelper.WriteValue("Window", "Top", Me.Top.ToString())
            End If
        Catch
            ' Ignore errors saving window state
        End Try
    End Sub

    Private Sub LoadWindowState()
        Try
            Dim windowState As String = iniHelper.ReadValue("Window", "WindowState", "Normal")
            Dim width As Integer = Integer.Parse(iniHelper.ReadValue("Window", "Width", "1138"))
            Dim height As Integer = Integer.Parse(iniHelper.ReadValue("Window", "Height", "692"))
            Dim left As Integer = Integer.Parse(iniHelper.ReadValue("Window", "Left", "100"))
            Dim top As Integer = Integer.Parse(iniHelper.ReadValue("Window", "Top", "100"))

            ' Validate screen bounds
            If left >= 0 AndAlso top >= 0 AndAlso left < Screen.PrimaryScreen.WorkingArea.Width AndAlso top < Screen.PrimaryScreen.WorkingArea.Height Then
                Me.StartPosition = FormStartPosition.Manual
                Me.Left = left
                Me.Top = top
            End If

            If width > Me.MinimumSize.Width AndAlso height > Me.MinimumSize.Height Then
                Me.Size = New Size(width, height)
            End If

            Select Case windowState
                Case "Maximized"
                    Me.WindowState = FormWindowState.Maximized
                Case "Minimized"
                    Me.WindowState = FormWindowState.Normal ' Don't start minimized
                Case Else
                    Me.WindowState = FormWindowState.Normal
            End Select

        Catch
            ' Use defaults if loading fails
        End Try
    End Sub

    ' === ENHANCED INITIALIZATION ===
    Private Sub InitializeAdvancedFeatures()
        ' Setup tooltips
        SetupTooltips()

        ' Load window state
        LoadWindowState()

        ' Set up advanced event handlers
        AddHandler Me.FormClosing, AddressOf SaveWindowStateOnClose
        AddHandler Me.Resize, AddressOf OnWindowResize

        ' Initialize file status display
        UpdateFileStatusDisplay()

        ' Set keyboard preview
        Me.KeyPreview = True
    End Sub

    Private Sub SaveWindowStateOnClose(sender As Object, e As FormClosingEventArgs)
        SaveWindowState()
        SaveConfiguration()
    End Sub

    Private Sub OnWindowResize(sender As Object, e As EventArgs)
        ' Update file status when window is resized (in case tree visibility changes)
        Static lastResize As DateTime = DateTime.MinValue
        If DateTime.Now.Subtract(lastResize).TotalMilliseconds > 500 Then
            UpdateFileStatusDisplay()
            lastResize = DateTime.Now
        End If
    End Sub
    ' FIXED: Get relative path for general use without URL encoding
    Private Function GetRelativePath(fullPath As String, basePath As String) As String
        Try
            ' Normalize paths to use consistent separators
            Dim normalizedBase As String = Path.GetFullPath(basePath).TrimEnd(Path.DirectorySeparatorChar)
            Dim normalizedFull As String = Path.GetFullPath(fullPath)

            ' Check if the file is actually under the base path
            If normalizedFull.StartsWith(normalizedBase & Path.DirectorySeparatorChar, StringComparison.OrdinalIgnoreCase) Then
                ' Calculate relative path by removing the base path
                Dim relativePath As String = normalizedFull.Substring(normalizedBase.Length + 1)
                Return relativePath
            Else
                ' File is not under base path, return just filename
                Return Path.GetFileName(fullPath)
            End If

        Catch ex As Exception
            ' Fallback to filename only
            Return Path.GetFileName(fullPath)
        End Try
    End Function

    ' FIXED: Generate file tree method in FileCombiner (if you're using it there too)
    ' You may need to update the FileCombiner.vb as well with this method:
    Private Function GetRelativePathForTree(fullPath As String, basePath As String) As String
        Try
            ' Simple string-based relative path calculation
            Dim normalizedBase As String = Path.GetFullPath(basePath).TrimEnd("\"c) & "\"
            Dim normalizedFull As String = Path.GetFullPath(fullPath)

            If normalizedFull.StartsWith(normalizedBase, StringComparison.OrdinalIgnoreCase) Then
                Return normalizedFull.Substring(normalizedBase.Length)
            Else
                Return Path.GetFileName(fullPath)
            End If
        Catch
            Return Path.GetFileName(fullPath)
        End Try
    End Function

    ' === DEBUG AND TESTING METHODS ===
    Private Sub TestBackupContents(zipFilePath As String)
        Try
            Using archive As ZipArchive = ZipFile.OpenRead(zipFilePath)
                Dim sb As New System.Text.StringBuilder()
                sb.AppendLine($"Backup file: {Path.GetFileName(zipFilePath)}")
                sb.AppendLine($"Total entries: {archive.Entries.Count}")
                sb.AppendLine($"File size: {FormatFileSize(New FileInfo(zipFilePath).Length)}")
                sb.AppendLine()
                sb.AppendLine("Contents:")

                For Each entry In archive.Entries.Take(20) ' Show first 20 entries
                    sb.AppendLine($"  {entry.FullName} ({FormatFileSize(entry.Length)})")
                Next

                If archive.Entries.Count > 20 Then
                    sb.AppendLine($"  ... and {archive.Entries.Count - 20} more files")
                End If

                MessageBox.Show(sb.ToString(), "Backup Contents", MessageBoxButtons.OK, MessageBoxIcon.Information)
            End Using
        Catch ex As Exception
            MessageBox.Show($"Error reading backup file: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    ' === MAIN LOAD EVENT ===
    Private Sub frmMain_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        InitializeApplication()
        InitializeAdvancedFeatures()
    End Sub

    ' === FORM CLOSING ===
    Private Sub frmMain_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
        ' Save configuration on exit
        SaveConfiguration()
        SaveWindowState()
    End Sub

End Class

==================== FILE: frmSettings.Designer.vb ====================
<Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()>
Partial Class frmSettings
    Inherits System.Windows.Forms.Form

    'Form overrides dispose to clean up the component list.
    <System.Diagnostics.DebuggerNonUserCode()>
    Protected Overrides Sub Dispose(disposing As Boolean)
        Try
            If disposing AndAlso components IsNot Nothing Then
                components.Dispose()
            End If
        Finally
            MyBase.Dispose(disposing)
        End Try
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    <System.Diagnostics.DebuggerStepThrough()>
    Private Sub InitializeComponent()
        Me.grpFolders = New System.Windows.Forms.GroupBox()
        Me.btnBrowseProject = New System.Windows.Forms.Button()
        Me.btnBrowseOutput = New System.Windows.Forms.Button()
        Me.txtProjectFolder = New System.Windows.Forms.TextBox()
        Me.txtOutputFolder = New System.Windows.Forms.TextBox()
        Me.lblProjectFolder = New System.Windows.Forms.Label()
        Me.lblOutputFolder = New System.Windows.Forms.Label()
        Me.grpDatabase = New System.Windows.Forms.GroupBox()
        Me.btnClearAll = New System.Windows.Forms.Button()
        Me.btnRemoveSelected = New System.Windows.Forms.Button()
        Me.btnBrowseDatabase = New System.Windows.Forms.Button()
        Me.lstDatabaseFiles = New System.Windows.Forms.ListBox()
        Me.lblDatabaseFiles = New System.Windows.Forms.Label()
        Me.chkIncludeDatabase = New System.Windows.Forms.CheckBox()
        Me.grpExcludeFolders = New System.Windows.Forms.GroupBox()
        Me.btnResetExcluded = New System.Windows.Forms.Button()
        Me.btnRemoveExcluded = New System.Windows.Forms.Button()
        Me.btnAddExcluded = New System.Windows.Forms.Button()
        Me.txtNewExcludedFolder = New System.Windows.Forms.TextBox()
        Me.lstExcludedFolders = New System.Windows.Forms.ListBox()
        Me.lblExcludedFolders = New System.Windows.Forms.Label()
        Me.lblNewExcludedFolder = New System.Windows.Forms.Label()
        Me.btnOK = New System.Windows.Forms.Button()
        Me.btnCancel = New System.Windows.Forms.Button()
        Me.folderBrowserDialog1 = New System.Windows.Forms.FolderBrowserDialog()
        Me.openFileDialog1 = New System.Windows.Forms.OpenFileDialog()
        Me.grpFolders.SuspendLayout()
        Me.grpDatabase.SuspendLayout()
        Me.grpExcludeFolders.SuspendLayout()
        Me.SuspendLayout()

        ' grpFolders
        Me.grpFolders.Controls.Add(Me.btnBrowseProject)
        Me.grpFolders.Controls.Add(Me.btnBrowseOutput)
        Me.grpFolders.Controls.Add(Me.txtProjectFolder)
        Me.grpFolders.Controls.Add(Me.txtOutputFolder)
        Me.grpFolders.Controls.Add(Me.lblProjectFolder)
        Me.grpFolders.Controls.Add(Me.lblOutputFolder)
        Me.grpFolders.Location = New System.Drawing.Point(12, 12)
        Me.grpFolders.Name = "grpFolders"
        Me.grpFolders.Size = New System.Drawing.Size(560, 120)
        Me.grpFolders.TabIndex = 0
        Me.grpFolders.TabStop = False
        Me.grpFolders.Text = "Folder Settings"

        ' lblProjectFolder
        Me.lblProjectFolder.AutoSize = True
        Me.lblProjectFolder.Location = New System.Drawing.Point(20, 30)
        Me.lblProjectFolder.Name = "lblProjectFolder"
        Me.lblProjectFolder.Size = New System.Drawing.Size(90, 17)
        Me.lblProjectFolder.TabIndex = 0
        Me.lblProjectFolder.Text = "Project Folder:"

        ' txtProjectFolder
        Me.txtProjectFolder.Location = New System.Drawing.Point(120, 27)
        Me.txtProjectFolder.Name = "txtProjectFolder"
        Me.txtProjectFolder.Size = New System.Drawing.Size(350, 22)
        Me.txtProjectFolder.TabIndex = 1

        ' btnBrowseProject
        Me.btnBrowseProject.Location = New System.Drawing.Point(480, 25)
        Me.btnBrowseProject.Name = "btnBrowseProject"
        Me.btnBrowseProject.Size = New System.Drawing.Size(70, 26)
        Me.btnBrowseProject.TabIndex = 2
        Me.btnBrowseProject.Text = "Browse..."
        Me.btnBrowseProject.UseVisualStyleBackColor = True

        ' lblOutputFolder
        Me.lblOutputFolder.AutoSize = True
        Me.lblOutputFolder.Location = New System.Drawing.Point(20, 70)
        Me.lblOutputFolder.Name = "lblOutputFolder"
        Me.lblOutputFolder.Size = New System.Drawing.Size(90, 17)
        Me.lblOutputFolder.TabIndex = 3
        Me.lblOutputFolder.Text = "Output Folder:"

        ' txtOutputFolder
        Me.txtOutputFolder.Location = New System.Drawing.Point(120, 67)
        Me.txtOutputFolder.Name = "txtOutputFolder"
        Me.txtOutputFolder.Size = New System.Drawing.Size(350, 22)
        Me.txtOutputFolder.TabIndex = 4

        ' btnBrowseOutput
        Me.btnBrowseOutput.Location = New System.Drawing.Point(480, 65)
        Me.btnBrowseOutput.Name = "btnBrowseOutput"
        Me.btnBrowseOutput.Size = New System.Drawing.Size(70, 26)
        Me.btnBrowseOutput.TabIndex = 5
        Me.btnBrowseOutput.Text = "Browse..."
        Me.btnBrowseOutput.UseVisualStyleBackColor = True

        ' grpExcludeFolders
        Me.grpExcludeFolders.Controls.Add(Me.btnResetExcluded)
        Me.grpExcludeFolders.Controls.Add(Me.btnRemoveExcluded)
        Me.grpExcludeFolders.Controls.Add(Me.btnAddExcluded)
        Me.grpExcludeFolders.Controls.Add(Me.txtNewExcludedFolder)
        Me.grpExcludeFolders.Controls.Add(Me.lstExcludedFolders)
        Me.grpExcludeFolders.Controls.Add(Me.lblExcludedFolders)
        Me.grpExcludeFolders.Controls.Add(Me.lblNewExcludedFolder)
        Me.grpExcludeFolders.Location = New System.Drawing.Point(12, 150)
        Me.grpExcludeFolders.Name = "grpExcludeFolders"
        Me.grpExcludeFolders.Size = New System.Drawing.Size(560, 180)
        Me.grpExcludeFolders.TabIndex = 1
        Me.grpExcludeFolders.TabStop = False
        Me.grpExcludeFolders.Text = "Excluded Folders (for Backup)"

        ' lblExcludedFolders
        Me.lblExcludedFolders.AutoSize = True
        Me.lblExcludedFolders.Location = New System.Drawing.Point(20, 25)
        Me.lblExcludedFolders.Name = "lblExcludedFolders"
        Me.lblExcludedFolders.Size = New System.Drawing.Size(180, 17)
        Me.lblExcludedFolders.TabIndex = 0
        Me.lblExcludedFolders.Text = "Folders to exclude from backup:"

        ' lstExcludedFolders
        Me.lstExcludedFolders.FormattingEnabled = True
        Me.lstExcludedFolders.ItemHeight = 16
        Me.lstExcludedFolders.Location = New System.Drawing.Point(20, 50)
        Me.lstExcludedFolders.Name = "lstExcludedFolders"
        Me.lstExcludedFolders.Size = New System.Drawing.Size(350, 84)
        Me.lstExcludedFolders.TabIndex = 1

        ' lblNewExcludedFolder
        Me.lblNewExcludedFolder.AutoSize = True
        Me.lblNewExcludedFolder.Location = New System.Drawing.Point(20, 145)
        Me.lblNewExcludedFolder.Name = "lblNewExcludedFolder"
        Me.lblNewExcludedFolder.Size = New System.Drawing.Size(100, 17)
        Me.lblNewExcludedFolder.TabIndex = 2
        Me.lblNewExcludedFolder.Text = "Add new folder:"

        ' txtNewExcludedFolder
        Me.txtNewExcludedFolder.Location = New System.Drawing.Point(130, 142)
        Me.txtNewExcludedFolder.Name = "txtNewExcludedFolder"
        Me.txtNewExcludedFolder.Size = New System.Drawing.Size(240, 22)
        Me.txtNewExcludedFolder.TabIndex = 3

        ' btnAddExcluded
        Me.btnAddExcluded.Location = New System.Drawing.Point(380, 50)
        Me.btnAddExcluded.Name = "btnAddExcluded"
        Me.btnAddExcluded.Size = New System.Drawing.Size(70, 30)
        Me.btnAddExcluded.TabIndex = 4
        Me.btnAddExcluded.Text = "Add"
        Me.btnAddExcluded.UseVisualStyleBackColor = True

        ' btnRemoveExcluded
        Me.btnRemoveExcluded.Location = New System.Drawing.Point(380, 90)
        Me.btnRemoveExcluded.Name = "btnRemoveExcluded"
        Me.btnRemoveExcluded.Size = New System.Drawing.Size(70, 30)
        Me.btnRemoveExcluded.TabIndex = 5
        Me.btnRemoveExcluded.Text = "Remove"
        Me.btnRemoveExcluded.UseVisualStyleBackColor = True

        ' btnResetExcluded
        Me.btnResetExcluded.Location = New System.Drawing.Point(380, 130)
        Me.btnResetExcluded.Name = "btnResetExcluded"
        Me.btnResetExcluded.Size = New System.Drawing.Size(70, 30)
        Me.btnResetExcluded.TabIndex = 6
        Me.btnResetExcluded.Text = "Reset"
        Me.btnResetExcluded.UseVisualStyleBackColor = True

        ' grpDatabase
        Me.grpDatabase.Controls.Add(Me.chkIncludeDatabase)
        Me.grpDatabase.Controls.Add(Me.lblDatabaseFiles)
        Me.grpDatabase.Controls.Add(Me.lstDatabaseFiles)
        Me.grpDatabase.Controls.Add(Me.btnBrowseDatabase)
        Me.grpDatabase.Controls.Add(Me.btnRemoveSelected)
        Me.grpDatabase.Controls.Add(Me.btnClearAll)
        Me.grpDatabase.Location = New System.Drawing.Point(12, 340)
        Me.grpDatabase.Name = "grpDatabase"
        Me.grpDatabase.Size = New System.Drawing.Size(560, 180)
        Me.grpDatabase.TabIndex = 2
        Me.grpDatabase.TabStop = False
        Me.grpDatabase.Text = "Database Settings"

        ' chkIncludeDatabase
        Me.chkIncludeDatabase.AutoSize = True
        Me.chkIncludeDatabase.Location = New System.Drawing.Point(20, 25)
        Me.chkIncludeDatabase.Name = "chkIncludeDatabase"
        Me.chkIncludeDatabase.Size = New System.Drawing.Size(200, 21)
        Me.chkIncludeDatabase.TabIndex = 0
        Me.chkIncludeDatabase.Text = "Include SQL Database Files"
        Me.chkIncludeDatabase.UseVisualStyleBackColor = True

        ' lblDatabaseFiles
        Me.lblDatabaseFiles.AutoSize = True
        Me.lblDatabaseFiles.Location = New System.Drawing.Point(20, 60)
        Me.lblDatabaseFiles.Name = "lblDatabaseFiles"
        Me.lblDatabaseFiles.Size = New System.Drawing.Size(150, 17)
        Me.lblDatabaseFiles.TabIndex = 1
        Me.lblDatabaseFiles.Text = "Selected SQL Files (0):"

        ' lstDatabaseFiles
        Me.lstDatabaseFiles.FormattingEnabled = True
        Me.lstDatabaseFiles.ItemHeight = 16
        Me.lstDatabaseFiles.Location = New System.Drawing.Point(20, 85)
        Me.lstDatabaseFiles.Name = "lstDatabaseFiles"
        Me.lstDatabaseFiles.Size = New System.Drawing.Size(450, 84)
        Me.lstDatabaseFiles.TabIndex = 2

        ' btnBrowseDatabase
        Me.btnBrowseDatabase.Location = New System.Drawing.Point(480, 85)
        Me.btnBrowseDatabase.Name = "btnBrowseDatabase"
        Me.btnBrowseDatabase.Size = New System.Drawing.Size(70, 30)
        Me.btnBrowseDatabase.TabIndex = 3
        Me.btnBrowseDatabase.Text = "Add SQL..."
        Me.btnBrowseDatabase.UseVisualStyleBackColor = True

        ' btnRemoveSelected
        Me.btnRemoveSelected.Location = New System.Drawing.Point(480, 125)
        Me.btnRemoveSelected.Name = "btnRemoveSelected"
        Me.btnRemoveSelected.Size = New System.Drawing.Size(70, 30)
        Me.btnRemoveSelected.TabIndex = 4
        Me.btnRemoveSelected.Text = "Remove"
        Me.btnRemoveSelected.UseVisualStyleBackColor = True

        ' btnClearAll
        Me.btnClearAll.Location = New System.Drawing.Point(380, 140)
        Me.btnClearAll.Name = "btnClearAll"
        Me.btnClearAll.Size = New System.Drawing.Size(70, 30)
        Me.btnClearAll.TabIndex = 5
        Me.btnClearAll.Text = "Clear All"
        Me.btnClearAll.UseVisualStyleBackColor = True

        ' btnOK
        Me.btnOK.Location = New System.Drawing.Point(400, 540)
        Me.btnOK.Name = "btnOK"
        Me.btnOK.Size = New System.Drawing.Size(80, 30)
        Me.btnOK.TabIndex = 3
        Me.btnOK.Text = "OK"
        Me.btnOK.UseVisualStyleBackColor = True

        ' btnCancel
        Me.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btnCancel.Location = New System.Drawing.Point(490, 540)
        Me.btnCancel.Name = "btnCancel"
        Me.btnCancel.Size = New System.Drawing.Size(80, 30)
        Me.btnCancel.TabIndex = 4
        Me.btnCancel.Text = "Cancel"
        Me.btnCancel.UseVisualStyleBackColor = True

        ' openFileDialog1
        Me.openFileDialog1.Filter = "SQL Script Files|*.sql"
        Me.openFileDialog1.Multiselect = True
        Me.openFileDialog1.Title = "Select SQL Database Files"

        ' frmSettings
        Me.AcceptButton = Me.btnOK
        Me.AutoScaleDimensions = New System.Drawing.SizeF(8.0!, 16.0!)
        Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
        Me.CancelButton = Me.btnCancel
        Me.ClientSize = New System.Drawing.Size(584, 590)
        Me.Controls.Add(Me.btnCancel)
        Me.Controls.Add(Me.btnOK)
        Me.Controls.Add(Me.grpDatabase)
        Me.Controls.Add(Me.grpExcludeFolders)
        Me.Controls.Add(Me.grpFolders)
        Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog
        Me.MaximizeBox = False
        Me.MinimizeBox = False
        Me.Name = "frmSettings"
        Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent
        Me.Text = "Application Settings"
        Me.grpFolders.ResumeLayout(False)
        Me.grpFolders.PerformLayout()
        Me.grpExcludeFolders.ResumeLayout(False)
        Me.grpExcludeFolders.PerformLayout()
        Me.grpDatabase.ResumeLayout(False)
        Me.grpDatabase.PerformLayout()
        Me.ResumeLayout(False)
    End Sub

    Friend WithEvents grpFolders As GroupBox
    Friend WithEvents btnBrowseProject As Button
    Friend WithEvents btnBrowseOutput As Button
    Friend WithEvents txtProjectFolder As TextBox
    Friend WithEvents txtOutputFolder As TextBox
    Friend WithEvents lblProjectFolder As Label
    Friend WithEvents lblOutputFolder As Label

    Friend WithEvents grpExcludeFolders As GroupBox
    Friend WithEvents btnResetExcluded As Button
    Friend WithEvents btnRemoveExcluded As Button
    Friend WithEvents btnAddExcluded As Button
    Friend WithEvents txtNewExcludedFolder As TextBox
    Friend WithEvents lstExcludedFolders As ListBox
    Friend WithEvents lblExcludedFolders As Label
    Friend WithEvents lblNewExcludedFolder As Label

    Friend WithEvents grpDatabase As GroupBox
    Friend WithEvents btnClearAll As Button
    Friend WithEvents btnRemoveSelected As Button
    Friend WithEvents btnBrowseDatabase As Button
    Friend WithEvents lstDatabaseFiles As ListBox
    Friend WithEvents lblDatabaseFiles As Label
    Friend WithEvents chkIncludeDatabase As CheckBox
    Friend WithEvents btnOK As Button
    Friend WithEvents btnCancel As Button
    Friend WithEvents folderBrowserDialog1 As FolderBrowserDialog
    Friend WithEvents openFileDialog1 As OpenFileDialog

End Class

==================== FILE: frmSettings.vb ====================
Imports System.IO

Public Class frmSettings
    Public Property ProjectFolderPath As String = ""
    Public Property OutputFolderPath As String = ""
    Public Property DatabaseFiles As New List(Of String)
    Public Property IncludeDatabase As Boolean = False
    Public Property ExcludedFolders As New List(Of String)

    ' Default excluded folders
    Private ReadOnly DefaultExcludedFolders As String() = {".git", ".vs", ".svn", "repobundle", "Resource"}

    Private Sub frmSettings_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        ' Load current settings into the form
        txtProjectFolder.Text = ProjectFolderPath
        txtOutputFolder.Text = OutputFolderPath

        ' Initialize excluded folders if empty
        If ExcludedFolders.Count = 0 Then
            ExcludedFolders.AddRange(DefaultExcludedFolders)
        End If

        ' Display excluded folders
        UpdateExcludedFoldersList()

        ' Display selected database files
        UpdateDatabaseFilesList()
        chkIncludeDatabase.Checked = IncludeDatabase

        ' Enable/disable database controls based on checkbox
        UpdateDatabaseControls()

        ' Add event handlers
        AddHandler txtNewExcludedFolder.KeyDown, AddressOf txtNewExcludedFolder_KeyDown
    End Sub

    Private Sub UpdateExcludedFoldersList()
        ' Clear and update the excluded folders display
        lstExcludedFolders.Items.Clear()
        For Each folder In ExcludedFolders
            lstExcludedFolders.Items.Add(folder)
        Next
    End Sub

    Private Sub UpdateDatabaseFilesList()
        ' Clear and update the database files display
        lstDatabaseFiles.Items.Clear()
        For Each filePath In DatabaseFiles
            lstDatabaseFiles.Items.Add(Path.GetFileName(filePath) & " - " & filePath)
        Next

        ' Update label to show count
        lblDatabaseFiles.Text = $"Selected SQL Files ({DatabaseFiles.Count}):"
    End Sub

    Private Sub btnBrowseProject_Click(sender As Object, e As EventArgs) Handles btnBrowseProject.Click
        folderBrowserDialog1.Description = "Select Project Folder"
        folderBrowserDialog1.ShowNewFolderButton = True

        If Not String.IsNullOrEmpty(txtProjectFolder.Text) AndAlso Directory.Exists(txtProjectFolder.Text) Then
            folderBrowserDialog1.SelectedPath = txtProjectFolder.Text
        End If

        If folderBrowserDialog1.ShowDialog() = DialogResult.OK Then
            txtProjectFolder.Text = folderBrowserDialog1.SelectedPath
        End If
    End Sub

    Private Sub btnBrowseOutput_Click(sender As Object, e As EventArgs) Handles btnBrowseOutput.Click
        folderBrowserDialog1.Description = "Select Output Folder"
        folderBrowserDialog1.ShowNewFolderButton = True

        If Not String.IsNullOrEmpty(txtOutputFolder.Text) AndAlso Directory.Exists(txtOutputFolder.Text) Then
            folderBrowserDialog1.SelectedPath = txtOutputFolder.Text
        End If

        If folderBrowserDialog1.ShowDialog() = DialogResult.OK Then
            txtOutputFolder.Text = folderBrowserDialog1.SelectedPath
        End If
    End Sub

    ' === EXCLUDED FOLDERS MANAGEMENT ===
    Private Sub btnAddExcluded_Click(sender As Object, e As EventArgs) Handles btnAddExcluded.Click
        AddExcludedFolder()
    End Sub

    Private Sub txtNewExcludedFolder_KeyDown(sender As Object, e As KeyEventArgs)
        If e.KeyCode = Keys.Enter Then
            e.SuppressKeyPress = True
            AddExcludedFolder()
        End If
    End Sub

    Private Sub AddExcludedFolder()
        Dim folderName As String = txtNewExcludedFolder.Text.Trim()

        If String.IsNullOrWhiteSpace(folderName) Then
            MessageBox.Show("Please enter a folder name to exclude.", "Input Required", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtNewExcludedFolder.Focus()
            Return
        End If

        ' Remove any path separators and get just the folder name
        folderName = Path.GetFileName(folderName.Replace("/", "\").TrimEnd("\"c))

        If String.IsNullOrWhiteSpace(folderName) Then
            MessageBox.Show("Please enter a valid folder name.", "Invalid Input", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtNewExcludedFolder.Focus()
            Return
        End If

        ' Check if already exists (case insensitive)
        If ExcludedFolders.Any(Function(f) String.Equals(f, folderName, StringComparison.OrdinalIgnoreCase)) Then
            MessageBox.Show($"Folder '{folderName}' is already in the excluded list.", "Duplicate Entry", MessageBoxButtons.OK, MessageBoxIcon.Information)
            txtNewExcludedFolder.SelectAll()
            txtNewExcludedFolder.Focus()
            Return
        End If

        ' Add to list
        ExcludedFolders.Add(folderName)
        UpdateExcludedFoldersList()

        ' Clear input and focus
        txtNewExcludedFolder.Clear()
        txtNewExcludedFolder.Focus()
    End Sub

    Private Sub btnRemoveExcluded_Click(sender As Object, e As EventArgs) Handles btnRemoveExcluded.Click
        If lstExcludedFolders.SelectedIndex >= 0 Then
            Dim selectedIndex As Integer = lstExcludedFolders.SelectedIndex
            Dim folderName As String = ExcludedFolders(selectedIndex)

            ' Confirm removal
            Dim result As DialogResult = MessageBox.Show($"Are you sure you want to remove '{folderName}' from the excluded folders list?",
                                                        "Confirm Removal", MessageBoxButtons.YesNo, MessageBoxIcon.Question)

            If result = DialogResult.Yes Then
                ExcludedFolders.RemoveAt(selectedIndex)
                UpdateExcludedFoldersList()

                ' Select next item or previous if we removed the last one
                If lstExcludedFolders.Items.Count > 0 Then
                    If selectedIndex < lstExcludedFolders.Items.Count Then
                        lstExcludedFolders.SelectedIndex = selectedIndex
                    Else
                        lstExcludedFolders.SelectedIndex = lstExcludedFolders.Items.Count - 1
                    End If
                End If
            End If
        Else
            MessageBox.Show("Please select a folder to remove from the excluded list.", "No Selection", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End If
    End Sub

    Private Sub btnResetExcluded_Click(sender As Object, e As EventArgs) Handles btnResetExcluded.Click
        Dim result As DialogResult = MessageBox.Show("Are you sure you want to reset the excluded folders list to default values?" & vbCrLf & vbCrLf &
                                                    "Default folders: " & String.Join(", ", DefaultExcludedFolders),
                                                    "Confirm Reset", MessageBoxButtons.YesNo, MessageBoxIcon.Question)

        If result = DialogResult.Yes Then
            ExcludedFolders.Clear()
            ExcludedFolders.AddRange(DefaultExcludedFolders)
            UpdateExcludedFoldersList()
        End If
    End Sub

    ' === DATABASE FILES MANAGEMENT ===
    Private Sub btnBrowseDatabase_Click(sender As Object, e As EventArgs) Handles btnBrowseDatabase.Click
        ' Configure for multiple SQL files only
        openFileDialog1.Filter = "SQL Script Files|*.sql"
        openFileDialog1.Title = "Select SQL Database Files"
        openFileDialog1.Multiselect = True

        If DatabaseFiles.Count > 0 Then
            ' Set initial directory to the first selected file's directory
            openFileDialog1.InitialDirectory = Path.GetDirectoryName(DatabaseFiles(0))
        End If

        If openFileDialog1.ShowDialog() = DialogResult.OK Then
            ' Add selected files to the list (avoid duplicates)
            For Each selectedFile In openFileDialog1.FileNames
                If Not DatabaseFiles.Contains(selectedFile) Then
                    DatabaseFiles.Add(selectedFile)
                End If
            Next

            UpdateDatabaseFilesList()
        End If
    End Sub

    Private Sub btnRemoveSelected_Click(sender As Object, e As EventArgs) Handles btnRemoveSelected.Click
        ' Remove selected items from the list
        If lstDatabaseFiles.SelectedIndex >= 0 Then
            Dim indexToRemove As Integer = lstDatabaseFiles.SelectedIndex
            DatabaseFiles.RemoveAt(indexToRemove)
            UpdateDatabaseFilesList()
        End If
    End Sub

    Private Sub btnClearAll_Click(sender As Object, e As EventArgs) Handles btnClearAll.Click
        ' Clear all database files
        If DatabaseFiles.Count > 0 Then
            Dim result As DialogResult = MessageBox.Show($"Are you sure you want to remove all {DatabaseFiles.Count} SQL files from the list?",
                                                        "Confirm Clear All", MessageBoxButtons.YesNo, MessageBoxIcon.Question)

            If result = DialogResult.Yes Then
                DatabaseFiles.Clear()
                UpdateDatabaseFilesList()
            End If
        Else
            MessageBox.Show("The SQL files list is already empty.", "No Files", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End If
    End Sub

    Private Sub chkIncludeDatabase_CheckedChanged(sender As Object, e As EventArgs) Handles chkIncludeDatabase.CheckedChanged
        UpdateDatabaseControls()
    End Sub

    Private Sub UpdateDatabaseControls()
        Dim enabled As Boolean = chkIncludeDatabase.Checked
        lstDatabaseFiles.Enabled = enabled
        btnBrowseDatabase.Enabled = enabled
        btnRemoveSelected.Enabled = enabled
        btnClearAll.Enabled = enabled
        lblDatabaseFiles.Enabled = enabled
    End Sub

    ' === FORM VALIDATION AND SAVE ===
    Private Sub btnOK_Click(sender As Object, e As EventArgs) Handles btnOK.Click
        ' Validate inputs
        If String.IsNullOrWhiteSpace(txtProjectFolder.Text) Then
            MessageBox.Show("Please select a project folder.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtProjectFolder.Focus()
            Return
        End If

        If Not Directory.Exists(txtProjectFolder.Text.Trim()) Then
            MessageBox.Show("The specified project folder does not exist.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtProjectFolder.Focus()
            Return
        End If

        If String.IsNullOrWhiteSpace(txtOutputFolder.Text) Then
            MessageBox.Show("Please select an output folder.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtOutputFolder.Focus()
            Return
        End If

        ' Validate excluded folders
        If ExcludedFolders.Count = 0 Then
            Dim result As DialogResult = MessageBox.Show("You have no excluded folders. This means ALL folders will be included in backups." & vbCrLf & vbCrLf &
                                                        "Do you want to continue?", "No Excluded Folders", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            If result = DialogResult.No Then
                Return
            End If
        End If

        ' Validate database settings
        If chkIncludeDatabase.Checked Then
            If DatabaseFiles.Count = 0 Then
                MessageBox.Show("Please select at least one SQL database file, or uncheck 'Include SQL Database Files'.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                btnBrowseDatabase.Focus()
                Return
            End If

            ' Validate that all selected files exist and are SQL files
            For Each filePath In DatabaseFiles.ToList()
                If Not File.Exists(filePath) Then
                    Dim result As DialogResult = MessageBox.Show($"Database file not found: {filePath}" & vbCrLf & vbCrLf &
                                                               "Do you want to remove it from the list and continue?", "Missing File", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                    If result = DialogResult.Yes Then
                        DatabaseFiles.Remove(filePath)
                        UpdateDatabaseFilesList()
                    Else
                        Return
                    End If
                End If

                If Path.GetExtension(filePath).ToLower() <> ".sql" Then
                    MessageBox.Show($"Only SQL files are supported: {filePath}", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                    Return
                End If
            Next

            ' Check again after cleanup
            If DatabaseFiles.Count = 0 Then
                MessageBox.Show("No valid SQL files remain. Please add SQL files or uncheck 'Include SQL Database Files'.", "No Valid Files", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                Return
            End If
        End If

        ' Save settings
        ProjectFolderPath = txtProjectFolder.Text.Trim()
        OutputFolderPath = txtOutputFolder.Text.Trim()
        IncludeDatabase = chkIncludeDatabase.Checked

        ' Ensure output folder exists
        Try
            If Not Directory.Exists(OutputFolderPath) Then
                Directory.CreateDirectory(OutputFolderPath)
            End If
        Catch ex As Exception
            MessageBox.Show($"Could not create output folder: {ex.Message}", "Folder Creation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtOutputFolder.Focus()
            Return
        End Try

        DialogResult = DialogResult.OK
        Close()
    End Sub

    Private Sub btnCancel_Click(sender As Object, e As EventArgs) Handles btnCancel.Click
        DialogResult = DialogResult.Cancel
        Close()
    End Sub

    ' === HELPER METHODS ===
    Public Sub LoadExcludedFoldersFromString(excludedFoldersString As String)
        ExcludedFolders.Clear()
        If Not String.IsNullOrWhiteSpace(excludedFoldersString) Then
            Dim folders() As String = excludedFoldersString.Split(New Char() {","c, ";"c}, StringSplitOptions.RemoveEmptyEntries)
            For Each folder In folders
                Dim trimmedFolder As String = folder.Trim()
                If Not String.IsNullOrWhiteSpace(trimmedFolder) Then
                    ExcludedFolders.Add(trimmedFolder)
                End If
            Next
        End If

        ' Ensure we have at least the default folders
        If ExcludedFolders.Count = 0 Then
            ExcludedFolders.AddRange(DefaultExcludedFolders)
        End If
    End Sub

    Public Function GetExcludedFoldersAsString() As String
        Return String.Join(",", ExcludedFolders)
    End Function

End Class

==================== FILE: IniHelper.vb ====================
Imports System.IO
Imports System.Text

Public Class IniHelper
    Private filePath As String

    Public Sub New(iniFilePath As String)
        filePath = iniFilePath
        ' Create the file if it doesn't exist
        If Not File.Exists(filePath) Then
            CreateDefaultIniFile()
        End If
    End Sub

    Private Sub CreateDefaultIniFile()
        Try
            ' Ensure directory exists
            Dim directoryPath As String = Path.GetDirectoryName(filePath)
            If Not String.IsNullOrEmpty(directoryPath) AndAlso Not Directory.Exists(directoryPath) Then
                Directory.CreateDirectory(directoryPath)
            End If

            ' Create empty file with UTF-8 encoding
            File.WriteAllText(filePath, "", Encoding.UTF8)
        Catch ex As Exception
            ' Ignore errors during file creation
        End Try
    End Sub

    Public Function ReadValue(section As String, key As String, Optional defaultValue As String = "") As String
        If Not File.Exists(filePath) Then
            Return defaultValue
        End If

        Try
            Dim lines() As String = File.ReadAllLines(filePath, Encoding.UTF8)
            Dim currentSection As String = ""
            Dim inTargetSection As Boolean = False

            For Each line In lines
                Dim trimmedLine As String = line.Trim()

                ' Skip empty lines and comments
                If String.IsNullOrEmpty(trimmedLine) OrElse trimmedLine.StartsWith(";") OrElse trimmedLine.StartsWith("#") Then
                    Continue For
                End If

                ' Check for section headers
                If trimmedLine.StartsWith("[") AndAlso trimmedLine.EndsWith("]") Then
                    currentSection = trimmedLine.Substring(1, trimmedLine.Length - 2)
                    inTargetSection = currentSection.Equals(section, StringComparison.OrdinalIgnoreCase)
                    Continue For
                End If

                ' Check for key-value pairs in the target section
                If inTargetSection AndAlso trimmedLine.Contains("=") Then
                    Dim equalIndex As Integer = trimmedLine.IndexOf("=")
                    Dim currentKey As String = trimmedLine.Substring(0, equalIndex).Trim()
                    Dim value As String = trimmedLine.Substring(equalIndex + 1).Trim()

                    If currentKey.Equals(key, StringComparison.OrdinalIgnoreCase) Then
                        ' Handle escaped characters
                        value = value.Replace("\n", vbCrLf)
                        value = value.Replace("\\", "\")
                        Return value
                    End If
                End If
            Next
        Catch ex As Exception
            ' Handle any file reading errors
            Return defaultValue
        End Try

        Return defaultValue
    End Function

    Public Sub WriteValue(section As String, key As String, value As String)
        Dim lines As New List(Of String)
        Dim sectionExists As Boolean = False
        Dim keyExists As Boolean = False
        Dim currentSection As String = ""
        Dim sectionStartIndex As Integer = -1
        Dim sectionEndIndex As Integer = -1

        ' Escape special characters in value
        value = value.Replace("\", "\\")
        value = value.Replace(vbCrLf, "\n")

        ' Read existing content if file exists
        If File.Exists(filePath) Then
            Try
                lines.AddRange(File.ReadAllLines(filePath, Encoding.UTF8))
            Catch
                ' If file can't be read, start fresh
                lines.Clear()
            End Try
        End If

        ' Find the section and key
        For i As Integer = 0 To lines.Count - 1
            Dim trimmedLine As String = lines(i).Trim()

            ' Check for section headers
            If trimmedLine.StartsWith("[") AndAlso trimmedLine.EndsWith("]") Then
                If sectionExists AndAlso sectionEndIndex = -1 Then
                    sectionEndIndex = i - 1
                End If

                currentSection = trimmedLine.Substring(1, trimmedLine.Length - 2)
                If currentSection.Equals(section, StringComparison.OrdinalIgnoreCase) Then
                    sectionExists = True
                    sectionStartIndex = i
                End If
                Continue For
            End If

            ' Check for key-value pairs in the target section
            If sectionExists AndAlso sectionEndIndex = -1 AndAlso trimmedLine.Contains("=") Then
                Dim equalIndex As Integer = trimmedLine.IndexOf("=")
                Dim currentKey As String = trimmedLine.Substring(0, equalIndex).Trim()

                If currentKey.Equals(key, StringComparison.OrdinalIgnoreCase) Then
                    lines(i) = key & "=" & value
                    keyExists = True
                    Exit For
                End If
            End If
        Next

        ' Set section end index if we reached the end of file
        If sectionExists AndAlso sectionEndIndex = -1 Then
            sectionEndIndex = lines.Count - 1
        End If

        ' Add section if it doesn't exist
        If Not sectionExists Then
            If lines.Count > 0 AndAlso Not String.IsNullOrEmpty(lines(lines.Count - 1)) Then
                lines.Add("")
            End If
            lines.Add("[" & section & "]")
            lines.Add(key & "=" & value)
        ElseIf Not keyExists Then
            ' Add key to existing section
            If sectionEndIndex >= sectionStartIndex Then
                lines.Insert(sectionEndIndex + 1, key & "=" & value)
            Else
                lines.Add(key & "=" & value)
            End If
        End If

        ' Write back to file
        Try
            Dim directoryPath As String = Path.GetDirectoryName(filePath)
            If Not Directory.Exists(directoryPath) Then
                Directory.CreateDirectory(directoryPath)
            End If
            File.WriteAllLines(filePath, lines, Encoding.UTF8)
        Catch ex As Exception
            Throw New Exception("Unable to write to INI file: " & ex.Message)
        End Try
    End Sub

    Public Function GetSections() As List(Of String)
        Dim sections As New List(Of String)

        If Not File.Exists(filePath) Then
            Return sections
        End If

        Try
            Dim lines() As String = File.ReadAllLines(filePath, Encoding.UTF8)

            For Each line In lines
                Dim trimmedLine As String = line.Trim()

                If trimmedLine.StartsWith("[") AndAlso trimmedLine.EndsWith("]") Then
                    Dim sectionName As String = trimmedLine.Substring(1, trimmedLine.Length - 2)
                    If Not sections.Contains(sectionName, StringComparer.OrdinalIgnoreCase) Then
                        sections.Add(sectionName)
                    End If
                End If
            Next
        Catch ex As Exception
            ' Handle any file reading errors
        End Try

        Return sections
    End Function

    Public Function GetKeys(section As String) As List(Of String)
        Dim keys As New List(Of String)

        If Not File.Exists(filePath) Then
            Return keys
        End If

        Try
            Dim lines() As String = File.ReadAllLines(filePath, Encoding.UTF8)
            Dim currentSection As String = ""
            Dim inTargetSection As Boolean = False

            For Each line In lines
                Dim trimmedLine As String = line.Trim()

                ' Skip empty lines and comments
                If String.IsNullOrEmpty(trimmedLine) OrElse trimmedLine.StartsWith(";") OrElse trimmedLine.StartsWith("#") Then
                    Continue For
                End If

                ' Check for section headers
                If trimmedLine.StartsWith("[") AndAlso trimmedLine.EndsWith("]") Then
                    currentSection = trimmedLine.Substring(1, trimmedLine.Length - 2)
                    inTargetSection = currentSection.Equals(section, StringComparison.OrdinalIgnoreCase)
                    Continue For
                End If

                ' Collect keys from the target section
                If inTargetSection AndAlso trimmedLine.Contains("=") Then
                    Dim equalIndex As Integer = trimmedLine.IndexOf("=")
                    Dim keyName As String = trimmedLine.Substring(0, equalIndex).Trim()
                    If Not keys.Contains(keyName, StringComparer.OrdinalIgnoreCase) Then
                        keys.Add(keyName)
                    End If
                End If
            Next
        Catch ex As Exception
            ' Handle any file reading errors
        End Try

        Return keys
    End Function

    Public Sub DeleteKey(section As String, key As String)
        If Not File.Exists(filePath) Then
            Return
        End If

        Try
            Dim lines As New List(Of String)(File.ReadAllLines(filePath, Encoding.UTF8))
            Dim currentSection As String = ""
            Dim inTargetSection As Boolean = False

            For i As Integer = lines.Count - 1 To 0 Step -1
                Dim trimmedLine As String = lines(i).Trim()

                ' Skip empty lines and comments
                If String.IsNullOrEmpty(trimmedLine) OrElse trimmedLine.StartsWith(";") OrElse trimmedLine.StartsWith("#") Then
                    Continue For
                End If

                ' Check for section headers
                If trimmedLine.StartsWith("[") AndAlso trimmedLine.EndsWith("]") Then
                    currentSection = trimmedLine.Substring(1, trimmedLine.Length - 2)
                    inTargetSection = currentSection.Equals(section, StringComparison.OrdinalIgnoreCase)
                    Continue For
                End If

                ' Delete matching key from target section
                If inTargetSection AndAlso trimmedLine.Contains("=") Then
                    Dim equalIndex As Integer = trimmedLine.IndexOf("=")
                    Dim currentKey As String = trimmedLine.Substring(0, equalIndex).Trim()

                    If currentKey.Equals(key, StringComparison.OrdinalIgnoreCase) Then
                        lines.RemoveAt(i)
                        Exit For
                    End If
                End If
            Next

            File.WriteAllLines(filePath, lines, Encoding.UTF8)
        Catch ex As Exception
            Throw New Exception("Unable to delete key from INI file: " & ex.Message)
        End Try
    End Sub

    Public Sub DeleteSection(section As String)
        If Not File.Exists(filePath) Then
            Return
        End If

        Try
            Dim lines As New List(Of String)(File.ReadAllLines(filePath, Encoding.UTF8))
            Dim currentSection As String = ""
            Dim inTargetSection As Boolean = False

            For i As Integer = lines.Count - 1 To 0 Step -1
                Dim trimmedLine As String = lines(i).Trim()

                ' Check for section headers
                If trimmedLine.StartsWith("[") AndAlso trimmedLine.EndsWith("]") Then
                    currentSection = trimmedLine.Substring(1, trimmedLine.Length - 2)

                    If inTargetSection Then
                        ' We've reached the previous section, stop deleting
                        inTargetSection = False
                    ElseIf currentSection.Equals(section, StringComparison.OrdinalIgnoreCase) Then
                        inTargetSection = True
                    End If
                End If

                ' Delete lines in target section
                If inTargetSection Then
                    lines.RemoveAt(i)
                End If
            Next

            File.WriteAllLines(filePath, lines, Encoding.UTF8)
        Catch ex As Exception
            Throw New Exception("Unable to delete section from INI file: " & ex.Message)
        End Try
    End Sub

    Public Function SectionExists(section As String) As Boolean
        Return GetSections().Contains(section, StringComparer.OrdinalIgnoreCase)
    End Function

    Public Function KeyExists(section As String, key As String) As Boolean
        Return GetKeys(section).Contains(key, StringComparer.OrdinalIgnoreCase)
    End Function

    Public Sub CreateSection(section As String)
        If Not SectionExists(section) Then
            WriteValue(section, "Created", DateTime.Now.ToString())
            DeleteKey(section, "Created")
        End If
    End Sub

    Public Function GetFilePath() As String
        Return filePath
    End Function

    Public Function GetFileSize() As Long
        Try
            If File.Exists(filePath) Then
                Return New FileInfo(filePath).Length
            End If
        Catch
            ' Ignore errors
        End Try
        Return 0
    End Function
End Class

==================== FILE: RepoBundle.vbproj ====================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <StartupObject>Sub Main</StartupObject>
    <UseWindowsForms>true</UseWindowsForms>
    <MyType>WindowsForms</MyType>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="RepoBundle\**" />
    <EmbeddedResource Remove="RepoBundle\**" />
    <None Remove="RepoBundle\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="RepoBundle.zip" />
  </ItemGroup>

  <ItemGroup>
    <Import Include="System.Data" />
    <Import Include="System.Drawing" />
    <Import Include="System.Windows.Forms" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="My Project\Application.Designer.vb">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Application.myapp</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <None Update="My Project\Application.myapp">
      <Generator>MyApplicationCodeGenerator</Generator>
      <LastGenOutput>Application.Designer.vb</LastGenOutput>
    </None>
  </ItemGroup>

</Project>

